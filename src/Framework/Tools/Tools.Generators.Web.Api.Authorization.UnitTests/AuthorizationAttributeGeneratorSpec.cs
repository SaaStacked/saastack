extern alias WebApiAuthorizationGenerator;
using System.Reflection;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using WebApiAuthorizationGenerator::JetBrains.Annotations;
using Xunit;
using AuthorizationAttributeGenerator =
    WebApiAuthorizationGenerator::Tools.Generators.Web.Api.Authorization.AuthorizationAttributeGenerator;

namespace Tools.Generators.Web.Api.Authorization.UnitTests;

[UsedImplicitly]
public class AuthorizationAttributeGeneratorSpec
{
    private static readonly string[]
        AdditionalCompilationAssemblies =
            { "System.Runtime.dll", "netstandard.dll" }; //HACK: required to analyze custom attributes

    private static CSharpCompilation CreateCompilation()
    {
        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;

        var references = new List<MetadataReference>
        {
            MetadataReference.CreateFromFile(typeof(AuthorizationAttributeGenerator).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location)
        };
        AdditionalCompilationAssemblies.ToList()
            .ForEach(item => references.Add(MetadataReference.CreateFromFile(Path.Combine(assemblyPath, item))));
        var compilation = CSharpCompilation.Create("compilation",
            new[]
            {
                CSharpSyntaxTree.ParseText("")
            },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        return compilation;
    }

    [Trait("Category", "Unit.Tooling")]
    public class GivenAuthorizationClasses
    {
        private GeneratorDriver _driver;

        public GivenAuthorizationClasses()
        {
            var generator = new AuthorizationAttributeGenerator();
            _driver = CSharpGeneratorDriver.Create(generator);
        }

        [Fact]
        public void WhenGenerate_ThenGenerates()
        {
            var result = Generate(CreateCompilation());

            result.Should().StartWith(
                """
                // <auto-generated/>
                using Domain.Interfaces.Authorization;

                namespace compilation;

                /// <summary>
                ///     Provides scopes for both Platform and Tenant
                /// </summary>
                public enum RoleAndFeatureScope
                {
                    Platform = 0,
                    Tenant = 1
                }

                /// <summary>
                ///     Provides all roles for both Platform and Tenant
                /// </summary>
                [Flags]
                public enum Roles
                {
                    Platform_ExternalWebhookService = 1 << 0,
                    Platform_Operations = 1 << 1,
                    Platform_ServiceAccount = 1 << 2,
                    Platform_Standard = 1 << 3,
                    Platform_TestingOnly = 1 << 4,
                    Platform_TestingOnlySuperUser = 1 << 5,
                    Tenant_BillingAdmin = 1 << 6,
                    Tenant_Member = 1 << 7,
                    Tenant_Owner = 1 << 8,
                    Tenant_TestingOnly = 1 << 9
                }

                /// <summary>
                ///     Provides all features for both Platform and Tenant
                /// </summary>
                [Flags]
                public enum Features
                {
                    Platform_Basic = 1 << 0,
                    Platform_Paid2 = 1 << 1,
                    Platform_Paid3 = 1 << 2,
                    Platform_PaidTrial = 1 << 3,
                    Platform_TestingOnly = 1 << 4,
                    Platform_TestingOnlySuperUser = 1 << 5,
                    Tenant_Basic = 1 << 6,
                    Tenant_Paid2 = 1 << 7,
                    Tenant_Paid3 = 1 << 8,
                    Tenant_PaidTrial = 1 << 9,
                    Tenant_TestingOnly = 1 << 10
                }
                """);
        }

        private string Generate(CSharpCompilation compilation)
        {
            _driver = _driver.RunGeneratorsAndUpdateCompilation(compilation, out _, out _);
            return _driver.GetRunResult().Results[0].GeneratedSources[0].SourceText.ToString();
        }
    }
}