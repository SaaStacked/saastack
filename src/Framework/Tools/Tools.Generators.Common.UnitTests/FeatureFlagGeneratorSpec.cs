extern alias CommonGenerator;
using System.Reflection;
using System.Text;
using CommonGenerator::JetBrains.Annotations;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using Xunit;
using FeatureFlagGenerator = CommonGenerator::Tools.Generators.Common.FeatureFlagGenerator;

namespace Tools.Generators.Common.UnitTests;

[UsedImplicitly]
public class FeatureFlagGeneratorSpec
{
    private static readonly string[]
        AdditionalCompilationAssemblies =
            { "System.Runtime.dll", "netstandard.dll" }; //HACK: required to analyze custom attributes

    private static CSharpCompilation CreateCompilation()
    {
        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;

        var references = new List<MetadataReference>
        {
            MetadataReference.CreateFromFile(typeof(FeatureFlagGenerator).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location)
        };
        AdditionalCompilationAssemblies.ToList()
            .ForEach(item => references.Add(MetadataReference.CreateFromFile(Path.Combine(assemblyPath, item))));
        var compilation = CSharpCompilation.Create("compilation",
            new[]
            {
                CSharpSyntaxTree.ParseText("")
            },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        return compilation;
    }

    [Trait("Category", "Unit.Tooling")]
    public class GivenFeatureFlagsResources
    {
        private GeneratorDriver _driver;

        public GivenFeatureFlagsResources()
        {
            var generator = new FeatureFlagGenerator();
            var additionalText = new ResourcesFile();
            _driver = CSharpGeneratorDriver.Create(new[] { generator }, new[] { additionalText });
        }

        [Fact]
        public void WhenGenerate_ThenGenerates()
        {
            var result = Generate(CreateCompilation());

            result.Should().StartWith(
                """
                // <auto-generated/>
                using Common.FeatureFlags;

                namespace Common.FeatureFlags;

                /// <inheritdoc cref="Flag" />
                partial class Flag
                {
                    public static Flag AFeatureFlag = new Flag("a_feature_flag");

                }
                """);
        }

        private string Generate(CSharpCompilation compilation)
        {
            _driver = _driver.RunGeneratorsAndUpdateCompilation(compilation, out _, out _);
            return _driver.GetRunResult().Results[0].GeneratedSources[0].SourceText.ToString();
        }
    }
}

public class ResourcesFile : AdditionalText
{
    public override string Path => "FeatureFlags.resx";

    public override SourceText GetText(CancellationToken cancellationToken = new())
    {
        return SourceText.From("""
                               <?xml version="1.0" encoding="utf-8"?>
                               <root>
                                   <data name="AFeatureFlag" xml:space="preserve">
                                       <value>a feature flag</value>
                                   </data>
                               </root>
                               """, Encoding.UTF8);
    }
}