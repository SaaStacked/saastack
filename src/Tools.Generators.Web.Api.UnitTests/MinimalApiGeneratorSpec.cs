extern alias Generators;
using System.Reflection;
using FluentAssertions;
using Generators::Domain.Interfaces.Authorization;
using Generators::JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using MinimalApiGenerator = Generators::Tools.Generators.Web.Api.MinimalApiGenerator;

namespace Tools.Generators.Web.Api.UnitTests;

[UsedImplicitly]
public class MinimalApiGeneratorSpec
{
    private static readonly string[]
        AdditionalCompilationAssemblies =
        [
            "System.Runtime.dll",
            "netstandard.dll"
        ]; //HACK: required to analyze custom attributes

    private static CSharpCompilation CreateCompilation(string sourceCode)
    {
        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;

        var references = new List<MetadataReference>
        {
            MetadataReference.CreateFromFile(typeof(MinimalApiGenerator).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location)
        };
        AdditionalCompilationAssemblies.ToList()
            .ForEach(item => references.Add(MetadataReference.CreateFromFile(Path.Combine(assemblyPath, item))));
        var compilation = CSharpCompilation.Create("compilation",
            [
                CSharpSyntaxTree.ParseText(sourceCode)
            ],
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        return compilation;
    }

    [Trait("Category", "Unit.Tooling")]
    public class GivenAServiceClass
    {
        private GeneratorDriver _driver;

        public GivenAServiceClass()
        {
            var generator = new MinimalApiGenerator();
            _driver = CSharpGeneratorDriver.Create(generator);
        }

        [Fact]
        public void WhenDefinesNoMethods_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                    
                        }
                    }
                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithNakedReturnType_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public string AMethod(ARequest request)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        await Task.CompletedTask;
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = api.AMethod(request);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithAsyncTaskReturnTypeAndNoCancellationToken_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithAsyncTaskReturnTypeAndCancellationToken_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndTestingOnly_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, isTestingOnly:true)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                #endif
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndHMACAuth_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.HMAC)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .RequireAuthorization("HMAC")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndTokenAuth_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.Token)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .RequireAuthorization("Token")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndPrivateInterHostAuth_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.PrivateInterHost)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var api = new global::ANamespace.AServiceClass();
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .RequireAuthorization("PrivateInterHost")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .ExcludeFromDescription();
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndClassConstructor_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Application.Interfaces;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    private readonly ICallerContextFactory _callerFactory;
                                                    
                                                    public CarsApi(ICallerContextFactory callerFactory)
                                                    {
                                                        _callerFactory = callerFactory;
                                                        _carsApplication = carsApplication;
                                                    }
                                                
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.Extensions.DependencyInjection;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;
                using Application.Interfaces;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithTags("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                {
                                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);
                
                                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                    {
                                        var callerFactory = services.GetRequiredService<<global namespace>.ICallerContextFactory>();
                
                                        var api = new global::ANamespace.AServiceClass(callerFactory);
                                        var result = await api.AMethod(request, cancellationToken);
                                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                    }
                                })
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                .WithOpenApi(op =>
                                    {
                                        op.OperationId = "A";
                                        op.Description = "(request type: ARequest)";
                                        op.Responses.Clear();
                                        return op;
                                    });
                
                        }
                    }
                }
                
                
                """);
        }

        [Fact]
        public void WhenDefinesARequestWithMultipleAuthorizeAttributes_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.Token, isTestingOnly:true)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                [Authorize(Roles.Platform_Operations, Features.Platform_PaidTrial)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                   #if TESTINGONLY
                               aserviceclassGroup.MapGet("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);
                   
                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.PaidTrial.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Operations.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   #endif
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesARequestWithSingleAuthorizeAttribute_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.Token, isTestingOnly:true)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                   #if TESTINGONLY
                               aserviceclassGroup.MapGet("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   #endif
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesARequestThatIsTenanted_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.Token)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>, ITenantedRequest
                                                {
                                                    public string? OrganizationId { get; set; }
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.MultiTenancyFilter>();
                               aserviceclassGroup.MapGet("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesAPostRequestThatIsIHasMultipartFormData_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Post, access:AccessType.Token)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>, IHasMultipartFormData
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                               aserviceclassGroup.MapPost("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesAPutPatchRequestThatIsIHasMultipartFormData_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.PutPatch, access:AccessType.Token)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>, IHasMultipartFormData
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                               aserviceclassGroup.MapPut("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A (Put)";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                               aserviceclassGroup.MapPatch("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A (Patch)";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesAPostRequestThatIHasFormUrlEncoded_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Post, access:AccessType.Token)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>, IHasFormUrlEncoded
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                               aserviceclassGroup.MapPost("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesAPutPatchRequestThatIHasFormUrlEncoded_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.PutPatch, access:AccessType.Token)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>, IHasFormUrlEncoded
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup(string.Empty)
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                               aserviceclassGroup.MapPut("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A (Put)";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                               aserviceclassGroup.MapPatch("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .DisableAntiforgery()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A (Patch)";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        [Fact]
        public void WhenDefinesABaseApiFromAttribute_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", OperationMethod.Get, access:AccessType.Token, isTestingOnly:true)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : WebRequest<ARequest, AResponse>
                                                {
                                                }
                                                [BaseApiFrom("aprefix")]
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                $$$"""
                   // <auto-generated/>
                   using System.Threading;
                   using System;
                   using Microsoft.Extensions.DependencyInjection;
                   using Microsoft.AspNetCore.Http;
                   using Microsoft.AspNetCore.Builder;
                   using Infrastructure.Web.Api.Interfaces;
                   using Infrastructure.Web.Api.Common.Extensions;

                   namespace compilation
                   {
                       public static class MinimalApiRegistration
                       {
                           public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                           {
                               var aserviceclassGroup = app.MapGroup("aprefix")
                                   .WithTags("AServiceClass")
                                   .RequireCors("__DefaultCorsPolicy")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
                   #if TESTINGONLY
                               aserviceclassGroup.MapGet("aroute",
                                   async (global::System.IServiceProvider serviceProvider, global::ANamespace.ARequest request) =>
                                   {
                                       return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                                       static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                                       {
                                           var api = new global::ANamespace.AServiceClass();
                                           var result = await api.AMethod(request, cancellationToken);
                                           return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                                       }
                                   })
                                   .RequireAuthorization("Token")
                                   .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|{{{PlatformFeatures.Basic.Name}}}|]},|Roles|:{|Platform|:[|{{{PlatformRoles.Standard.Name}}}|]}}")
                                   .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<ANamespace.ARequest>>()
                                   .WithOpenApi(op =>
                                       {
                                           op.OperationId = "A";
                                           op.Description = "(request type: ARequest)";
                                           op.Responses.Clear();
                                           return op;
                                       });
                   #endif
                   
                           }
                       }
                   }
                   
                   
                   """);
        }

        private string Generate(CSharpCompilation compilation)
        {
            _driver = _driver.RunGeneratorsAndUpdateCompilation(compilation, out _, out _);
            return _driver.GetRunResult().Results[0].GeneratedSources[0].SourceText.ToString();
        }
    }
}