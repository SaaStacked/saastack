using System.Text.Json.Serialization;
using Application.Interfaces.Resources;

namespace Application.Resources.Shared;

public class Identity : IIdentifiableResource
{
    public required bool HasCredentials { get; set; }

    public required bool IsMfaEnabled { get; set; }

    public required string Id { get; set; }
}

public class AuthenticateTokens
{
    public required AuthenticationToken AccessToken { get; set; }

    public AuthenticationToken? IdToken { get; set; }

    public required AuthenticationToken RefreshToken { get; set; }

    public required string UserId { get; set; }
}

public class ProviderAuthenticationTokens
{
    public required AuthenticationToken AccessToken { get; set; }

    public required List<AuthenticationToken> OtherTokens { get; set; }

    public required string Provider { get; set; }

    public required AuthenticationToken? RefreshToken { get; set; }
}

public class AuthenticationToken
{
    public required DateTime? ExpiresOn { get; set; }

    public required TokenType Type { get; set; }

    public required string Value { get; set; }
}

public class APIKey : IIdentifiableResource
{
    public string? Description { get; set; }

    public DateTime? ExpiresOnUtc { get; set; }

    public required string Key { get; set; }

    public required string UserId { get; set; }

    public required string Id { get; set; }
}

public class AuthToken
{
    public AuthToken(TokenType type, string value, DateTime? expiresOn)
    {
        Type = type;
        Value = value;
        ExpiresOn = expiresOn;
    }

    public DateTime? ExpiresOn { get; }

    public TokenType Type { get; }

    public string Value { get; }
}

public enum TokenType
{
    OtherToken = 0, // e.g. idToken
    AccessToken = 1, // access_token
    RefreshToken = 2 // refresh_token
}

public class SSOUser : IIdentifiableResource
{
    public required string ProviderUId { get; set; }

    public required string Id { get; set; }
}

public class PersonCredential : IIdentifiableResource
{
    public bool IsMfaEnabled { get; set; }

    public required EndUser User { get; set; }

    public required string Id { get; set; }
}

public class PersonCredentialEmailConfirmation
{
    public required string Token { get; set; }

    public required string Url { get; set; }
}

public enum CredentialMfaAuthenticatorType
{
    None = 0,
    RecoveryCodes = 1, // Recovery codes
    OobSms = 2, // Code is sent "Out of Band" in an SMS message 
    OobEmail = 3, // Code is sent "Out of Band" in an email message
    TotpAuthenticator = 4 // "Time-based One Time Password" is generated by a supported authenticator App
}

public class CredentialMfaAuthenticator : IIdentifiableResource
{
    public bool IsActive { get; set; }

    public required CredentialMfaAuthenticatorType Type { get; set; }

    public required string Id { get; set; }
}

public class CredentialMfaAuthenticatorAssociation
{
    public string? BarCodeUri { get; set; }

    public string? OobCode { get; set; }

    public List<string>? RecoveryCodes { get; set; }

    public string? Secret { get; set; }

    public required CredentialMfaAuthenticatorType Type { get; set; }
}

public class CredentialMfaAuthenticatorChallenge
{
    public string? OobCode { get; set; }

    public CredentialMfaAuthenticatorType Type { get; set; }
}

public class CredentialMfaAuthenticatorConfirmation
{
    public List<CredentialMfaAuthenticator>? Authenticators { get; set; }

    public AuthenticateTokens? Tokens { get; set; }
}

public class MachineCredential : IIdentifiableResource
{
    public required string ApiKey { get; set; }

    public required string CreatedById { get; set; }

    public string? Description { get; set; }

    public DateTime? ExpiresOnUtc { get; set; }

    public required string Id { get; set; }
}

public class OpenIdConnectDiscoveryDocument
{
    public required string AuthorizationEndpoint { get; set; }

    public required List<string> ClaimsSupported { get; set; }

    public required List<string> CodeChallengeMethodsSupported { get; set; }

    public required List<string> IdTokenEncryptionAlgValuesSupported { get; set; }

    public required List<string> IdTokenSigningAlgValuesSupported { get; set; }

    public required string Issuer { get; set; }

    public required string JwksUri { get; set; }

    public required string RegistrationEndPoint { get; set; }

    public required List<string> ResponseTypesSupported { get; set; }

    public required List<string> ScopesSupported { get; set; }

    public required List<string> SubjectTypesSupported { get; set; }

    public required string TokenEndpoint { get; set; }

    public required List<string> TokenEndpointAuthMethodsSupported { get; set; }

    public required List<string> TokenEndpointAuthSigningAlgValuesSupported { get; set; }

    public required List<string> UserInfoEncryptionAlgValuesSupported { get; set; }

    public required string UserInfoEndpoint { get; set; }

    public required List<string> UserInfoSigningAlgValuesSupported { get; set; }
}

public class OpenIdConnectAuthorizationCode
{
    public required string Code { get; set; }

    public string? State { get; set; }
}

public class OpenIdConnectAuthorization
{
    public OpenIdConnectAuthorizationCode? Code { get; set; }

    public string? RawRedirectUri { get; set; }
}

public class OpenIdConnectTokens
{
    public required string AccessToken { get; set; }

    public required int ExpiresIn { get; set; }

    public string? IdToken { get; set; }

    public string? RefreshToken { get; set; }

    public required OAuth2TokenType TokenType { get; set; }
}

public class OpenIdConnectUserInfo
{
    public ProfileAddress? Address { get; set; }

    public string? Email { get; set; }

    [JsonPropertyName("email_verified")] public bool? EmailVerified { get; set; }

    [JsonPropertyName("family_name")] public string? FamilyName { get; set; }

    [JsonPropertyName("given_name")] public string? GivenName { get; set; }

    public string? Locale { get; set; }

    public string? Name { get; set; }

    [JsonPropertyName("phone_number")] public string? PhoneNumber { get; set; }

    [JsonPropertyName("phone_number_verified")]
    public bool? PhoneNumberVerified { get; set; }

    public string? Picture { get; set; }

    public required string Sub { get; set; }

    [JsonPropertyName("zoneinfo")] public string? ZoneInfo { get; set; }
}

public class JsonWebKeySet
{
    public required List<JsonWebKey> Keys { get; set; }
}

public class JsonWebKey
{
    public required string Alg { get; set; }

    public string? E { get; set; }

    public string? K { get; set; }

    public required string Kid { get; set; }

    public required string Kty { get; set; }

    public string? N { get; set; }

    public required string Use { get; set; }
}

public class OAuth2Client : IIdentifiableResource
{
    public required string Name { get; set; }

    public string? RedirectUri { get; set; }

    public required string Id { get; set; }
}

public class OAuth2ClientWithSecret : OAuth2Client
{
    public DateTime? ExpiresOnUtc { get; set; }

    public required string Secret { get; set; }
}

public class OAuth2ClientWithSecrets : OAuth2Client
{
    public required List<OAuthClientSecret> Secrets { get; set; }
}

public class OAuthClientSecret
{
    public DateTime? ExpiresOnUtc { get; set; }

    public required string Reference { get; set; }
}

public class OAuth2ClientConsent : IIdentifiableResource
{
    public required string ClientId { get; set; }

    public required bool IsConsented { get; set; }

    public required List<string> Scopes { get; set; }

    public required string UserId { get; set; }

    public required string Id { get; set; }
}

public enum OpenIdConnectCodeChallengeMethod
{
    Plain = 0, // OAuth2Constants.CodeChallengeMethods.Plain
    S256 = 1 // OAuth2Constants.CodeChallengeMethods.S256
}

public enum OAuth2ResponseType
{
    Code = 0, // OAuth2Constants.ResponseTypes.Code
    Id_Token = 1, // OAuth2Constants.ResponseTypes.IdToken
    Token = 2 // OAuth2Constants.ResponseTypes.Token
}

public enum OAuth2TokenType
{
    Bearer = 0 // OAuth2Constants.TokenTypes.Bearer
}

public enum OAuth2GrantType
{
    Authorization_Code = 0, // OAuth2Constants.GrantTypes.AuthorizationCode
    Refresh_Token = 1, // OAuth2Constants.GrantTypes.RefreshToken
    Client_Credentials = 2, // OAuth2Constants.GrantTypes.ClientCredentials
    Password = 3, // OAuth2Constants.GrantTypes.Password
    Implicit = 4 // OAuth2Constants.GrantTypes.Implicit
}