// This file is auto-generated by @hey-api/openapi-ts

import {
    createClient,
    createConfig,
    formDataBodySerializer,
    type Options,
    urlSearchParamsBodySerializer
} from '@hey-api/client-axios';
import type {
    AssignPlatformRolesData,
    AssignPlatformRolesError,
    AssignPlatformRolesResponse,
    AssignRolesToOrganizationPatchData,
    AssignRolesToOrganizationPatchError,
    AssignRolesToOrganizationPatchResponse,
    AssignRolesToOrganizationPutData,
    AssignRolesToOrganizationPutError,
    AssignRolesToOrganizationPutResponse,
    AssociateCredentialMfaAuthenticatorForCallerData,
    AssociateCredentialMfaAuthenticatorForCallerError,
    AssociateCredentialMfaAuthenticatorForCallerResponse2,
    AuthenticateCredentialData,
    AuthenticateCredentialError,
    AuthenticateCredentialResponse,
    AuthenticateSingleSignOnData,
    AuthenticateSingleSignOnError,
    AuthenticateSingleSignOnResponse,
    AuthorizeByFeatureTestingOnlyError,
    AuthorizeByFeatureTestingOnlyResponse,
    AuthorizeByNothingTestingOnlyError,
    AuthorizeByNothingTestingOnlyResponse,
    AuthorizeByRoleTestingOnlyError,
    AuthorizeByRoleTestingOnlyResponse,
    AuthorizeOauth2GetData,
    AuthorizeOauth2GetError,
    AuthorizeOauth2GetResponse,
    AuthorizeOauth2PostData,
    AuthorizeOauth2PostError,
    AuthorizeOauth2PostResponse,
    CancelBookingData,
    CancelBookingError,
    CancelBookingResponse,
    CancelSubscriptionData,
    CancelSubscriptionError,
    CancelSubscriptionResponse,
    ChallengeCredentialMfaAuthenticatorForCallerPatchData,
    ChallengeCredentialMfaAuthenticatorForCallerPatchError,
    ChallengeCredentialMfaAuthenticatorForCallerPatchResponse,
    ChallengeCredentialMfaAuthenticatorForCallerPutData,
    ChallengeCredentialMfaAuthenticatorForCallerPutError,
    ChallengeCredentialMfaAuthenticatorForCallerPutResponse,
    ChangeCredentialMfaForCallerPatchData,
    ChangeCredentialMfaForCallerPatchError,
    ChangeCredentialMfaForCallerPatchResponse,
    ChangeCredentialMfaForCallerPutData,
    ChangeCredentialMfaForCallerPutError,
    ChangeCredentialMfaForCallerPutResponse,
    ChangeDefaultOrganizationPatchData,
    ChangeDefaultOrganizationPatchError,
    ChangeDefaultOrganizationPatchResponse,
    ChangeDefaultOrganizationPutData,
    ChangeDefaultOrganizationPutError,
    ChangeDefaultOrganizationPutResponse,
    ChangeOrganizationAvatarPatchData,
    ChangeOrganizationAvatarPatchError,
    ChangeOrganizationAvatarPatchResponse,
    ChangeOrganizationAvatarPutData,
    ChangeOrganizationAvatarPutError,
    ChangeOrganizationAvatarPutResponse,
    ChangeOrganizationPatchData,
    ChangeOrganizationPatchError,
    ChangeOrganizationPatchResponse,
    ChangeOrganizationPutData,
    ChangeOrganizationPutError,
    ChangeOrganizationPutResponse,
    ChangeProfileAvatarPatchData,
    ChangeProfileAvatarPatchError,
    ChangeProfileAvatarPatchResponse,
    ChangeProfileAvatarPutData,
    ChangeProfileAvatarPutError,
    ChangeProfileAvatarPutResponse,
    ChangeProfileContactAddressPatchData,
    ChangeProfileContactAddressPatchError,
    ChangeProfileContactAddressPatchResponse,
    ChangeProfileContactAddressPutData,
    ChangeProfileContactAddressPutError,
    ChangeProfileContactAddressPutResponse,
    ChangeProfilePatchData,
    ChangeProfilePatchError,
    ChangeProfilePatchResponse,
    ChangeProfilePutData,
    ChangeProfilePutError,
    ChangeProfilePutResponse,
    ChangeSubscriptionPlanPatchData,
    ChangeSubscriptionPlanPatchError,
    ChangeSubscriptionPlanPatchResponse,
    ChangeSubscriptionPlanPutData,
    ChangeSubscriptionPlanPutError,
    ChangeSubscriptionPlanPutResponse,
    ChargebeeNotifyWebhookEventData,
    ChargebeeNotifyWebhookEventError,
    ChargebeeNotifyWebhookEventResponse,
    CompleteCredentialResetData,
    CompleteCredentialResetError,
    CompleteCredentialResetResponse,
    ConfirmCredentialMfaAuthenticatorForCallerPatchData,
    ConfirmCredentialMfaAuthenticatorForCallerPatchError,
    ConfirmCredentialMfaAuthenticatorForCallerPatchResponse,
    ConfirmCredentialMfaAuthenticatorForCallerPutData,
    ConfirmCredentialMfaAuthenticatorForCallerPutError,
    ConfirmCredentialMfaAuthenticatorForCallerPutResponse,
    ConfirmEmailDeliveredData,
    ConfirmEmailDeliveredError,
    ConfirmEmailDeliveredResponse,
    ConfirmEmailDeliveryFailedData,
    ConfirmEmailDeliveryFailedError,
    ConfirmEmailDeliveryFailedResponse,
    ConfirmPersonCredentialRegistrationData,
    ConfirmPersonCredentialRegistrationError,
    ConfirmPersonCredentialRegistrationResponse,
    ConfirmSmsDeliveredData,
    ConfirmSmsDeliveredError,
    ConfirmSmsDeliveredResponse,
    ConfirmSmsDeliveryFailedData,
    ConfirmSmsDeliveryFailedError,
    ConfirmSmsDeliveryFailedResponse,
    ConsentOauth2ClientForCallerData,
    ConsentOauth2ClientForCallerError,
    ConsentOauth2ClientForCallerResponse,
    ContentNegotiationsTestingOnlyData,
    ContentNegotiationsTestingOnlyError,
    ContentNegotiationsTestingOnlyResponse,
    CreateApiKeyData,
    CreateApiKeyError,
    CreateApiKeyResponse,
    CreateOauth2ClientData,
    CreateOauth2ClientError,
    CreateOauth2ClientResponse,
    CreateOrganizationData,
    CreateOrganizationError,
    CreateOrganizationResponse,
    DeleteApiKeyData,
    DeleteApiKeyError,
    DeleteApiKeyResponse,
    DeleteCarData,
    DeleteCarError,
    DeleteCarResponse,
    DeleteImageData,
    DeleteImageError,
    DeleteImageResponse,
    DeleteOauth2ClientData,
    DeleteOauth2ClientError,
    DeleteOauth2ClientResponse,
    DeleteOrganizationAvatarData,
    DeleteOrganizationAvatarError,
    DeleteOrganizationAvatarResponse,
    DeleteOrganizationData,
    DeleteOrganizationError,
    DeleteOrganizationResponse,
    DeleteProfileAvatarData,
    DeleteProfileAvatarError,
    DeleteProfileAvatarResponse2,
    DeliverAuditData,
    DeliverAuditError,
    DeliverAuditResponse,
    DeliverUsageData,
    DeliverUsageError,
    DeliverUsageResponse,
    DestroyAllRepositoriesData,
    DestroyAllRepositoriesError,
    DestroyAllRepositoriesResponse,
    DisassociateCredentialMfaAuthenticatorForCallerData,
    DisassociateCredentialMfaAuthenticatorForCallerError,
    DisassociateCredentialMfaAuthenticatorForCallerResponse,
    DownloadImageData,
    DownloadImageError,
    DownloadImageResponse,
    DownloadStreamTestingOnlyError,
    DownloadStreamTestingOnlyResponse,
    DrainAllAuditsData,
    DrainAllAuditsError,
    DrainAllAuditsResponse,
    DrainAllEmailsData,
    DrainAllEmailsError,
    DrainAllEmailsResponse,
    DrainAllEventNotificationsData,
    DrainAllEventNotificationsError,
    DrainAllEventNotificationsResponse,
    DrainAllProvisioningsData,
    DrainAllProvisioningsError,
    DrainAllProvisioningsResponse,
    DrainAllSmsesData,
    DrainAllSmsesError,
    DrainAllSmsesResponse,
    DrainAllUsagesData,
    DrainAllUsagesError,
    DrainAllUsagesResponse,
    ErrorsErrorTestingOnlyError,
    ErrorsErrorTestingOnlyResponse,
    ErrorsThrowTestingOnlyError,
    ErrorsThrowTestingOnlyResponse,
    ExchangeOauth2ForTokensData,
    ExchangeOauth2ForTokensError,
    ExchangeOauth2ForTokensResponse,
    ExportSubscriptionsToMigrateData,
    ExportSubscriptionsToMigrateError,
    ExportSubscriptionsToMigrateResponse2,
    ForceCancelSubscriptionData,
    ForceCancelSubscriptionError,
    ForceCancelSubscriptionResponse,
    FormatsTestingOnlyData,
    FormatsTestingOnlyError,
    FormatsTestingOnlyResponse2,
    GetAllFeatureFlagsError,
    GetAllFeatureFlagsResponse2,
    GetCallerWithHmacTestingOnlyError,
    GetCallerWithHmacTestingOnlyResponse,
    GetCallerWithTokenOrApiKeyTestingOnlyError,
    GetCallerWithTokenOrApiKeyTestingOnlyResponse,
    GetCarData,
    GetCarError,
    GetCarResponse2,
    GetDiscoveryDocumentError,
    GetDiscoveryDocumentResponse2,
    GetFeatureFlagData,
    GetFeatureFlagError,
    GetFeatureFlagForCallerData,
    GetFeatureFlagForCallerError,
    GetFeatureFlagForCallerResponse,
    GetFeatureFlagResponse2,
    GetIdentityForCallerError,
    GetIdentityForCallerResponse,
    GetImageData,
    GetImageError,
    GetImageResponse2,
    GetInsecureTestingOnlyError,
    GetInsecureTestingOnlyResponse,
    GetJsonWebKeySetError,
    GetJsonWebKeySetResponse2,
    GetOauth2ClientConsentForCallerData,
    GetOauth2ClientConsentForCallerError,
    GetOauth2ClientConsentForCallerResponse,
    GetOauth2ClientData,
    GetOauth2ClientError,
    GetOauth2ClientResponse,
    GetOrganizationData,
    GetOrganizationError,
    GetOrganizationResponse2,
    GetOrganizationSettingsData,
    GetOrganizationSettingsError,
    GetOrganizationSettingsResponse2,
    GetPersonCredentialRegistrationConfirmationData,
    GetPersonCredentialRegistrationConfirmationError,
    GetPersonCredentialRegistrationConfirmationResponse2,
    GetProfileForCallerError,
    GetProfileForCallerResponse2,
    GetSubscriptionData,
    GetSubscriptionError,
    GetSubscriptionResponse2,
    GetTestingOnlyData,
    GetTestingOnlyError,
    GetTestingOnlyResponse,
    GetUserInfoForCallerError,
    GetUserInfoForCallerResponse2,
    GetWithRedirectTestingOnlyData,
    GetWithRedirectTestingOnlyError,
    GetWithRedirectTestingOnlyResponse,
    GetWithSimpleArrayTestingOnlyData,
    GetWithSimpleArrayTestingOnlyError,
    GetWithSimpleArrayTestingOnlyResponse,
    HealthCheckError,
    HealthCheckResponse2,
    InitiatePasswordResetData,
    InitiatePasswordResetError,
    InitiatePasswordResetResponse,
    InviteGuestData,
    InviteGuestError,
    InviteGuestResponse2,
    InviteMemberToOrganizationData,
    InviteMemberToOrganizationError,
    InviteMemberToOrganizationResponse2,
    ListCredentialMfaAuthenticatorsForCallerData,
    ListCredentialMfaAuthenticatorsForCallerError,
    ListCredentialMfaAuthenticatorsForCallerResponse2,
    ListMembersForOrganizationData,
    ListMembersForOrganizationError,
    ListMembersForOrganizationResponse2,
    ListMembershipsForCallerData,
    ListMembershipsForCallerError,
    ListMembershipsForCallerResponse2,
    ListPricingPlansError,
    ListPricingPlansResponse2,
    MailgunNotifyWebhookEventData,
    MailgunNotifyWebhookEventError,
    MailgunNotifyWebhookEventResponse,
    MakeBookingData,
    MakeBookingError,
    MakeBookingResponse2,
    MigrateSubscriptionPatchData,
    MigrateSubscriptionPatchError,
    MigrateSubscriptionPatchResponse,
    MigrateSubscriptionPutData,
    MigrateSubscriptionPutError,
    MigrateSubscriptionPutResponse,
    NotifyDomainEventData,
    NotifyDomainEventError,
    NotifyDomainEventResponse,
    NotifyProvisioningData,
    NotifyProvisioningError,
    NotifyProvisioningResponse,
    OpenApiGetTestingOnlyData,
    OpenApiGetTestingOnlyError,
    OpenApiGetTestingOnlyResponse,
    OpenApiPostFormUrlEncodedTestingOnlyData,
    OpenApiPostFormUrlEncodedTestingOnlyError,
    OpenApiPostFormUrlEncodedTestingOnlyResponse,
    OpenApiPostMultiPartFormDataTestingOnlyData,
    OpenApiPostMultiPartFormDataTestingOnlyError,
    OpenApiPostMultiPartFormDataTestingOnlyResponse,
    OpenApiPostTestingOnlyData,
    OpenApiPostTestingOnlyError,
    OpenApiPostTestingOnlyResponse,
    OpenApiPutTestingOnlyPatchData,
    OpenApiPutTestingOnlyPatchError,
    OpenApiPutTestingOnlyPatchResponse,
    OpenApiPutTestingOnlyPutData,
    OpenApiPutTestingOnlyPutError,
    OpenApiPutTestingOnlyPutResponse,
    PostInsecureTestingOnlyData,
    PostInsecureTestingOnlyError,
    PostInsecureTestingOnlyResponse,
    PostTestingOnlyData,
    PostTestingOnlyError,
    PostTestingOnlyResponse,
    PostWithEmptyBodyAndRequiredPropertiesTestingOnlyData,
    PostWithEmptyBodyAndRequiredPropertiesTestingOnlyError,
    PostWithEmptyBodyAndRequiredPropertiesTestingOnlyResponse,
    PostWithEmptyBodyTestingOnlyData,
    PostWithEmptyBodyTestingOnlyError,
    PostWithEmptyBodyTestingOnlyResponse,
    PostWithRedirectTestingOnlyData,
    PostWithRedirectTestingOnlyError,
    PostWithRedirectTestingOnlyResponse,
    PostWithRouteParamsAndEmptyBodyTestingOnlyData,
    PostWithRouteParamsAndEmptyBodyTestingOnlyError,
    PostWithRouteParamsAndEmptyBodyTestingOnlyResponse,
    RecordMeasureData,
    RecordMeasureError,
    RecordMeasureResponse,
    RecordUseData,
    RecordUseError,
    RecordUseResponse,
    RefreshTokenData,
    RefreshTokenError,
    RefreshTokenResponse2,
    RegenerateOauth2ClientSecretData,
    RegenerateOauth2ClientSecretError,
    RegenerateOauth2ClientSecretResponse,
    RegisterCarData,
    RegisterCarError,
    RegisterCarResponse,
    RegisterMachineData,
    RegisterMachineError,
    RegisterMachineResponse2,
    RegisterPersonCredentialData,
    RegisterPersonCredentialError,
    RegisterPersonCredentialResponse2,
    RequestCorrelationsTestingOnlyError,
    RequestCorrelationsTestingOnlyResponse,
    ResendGuestInvitationData,
    ResendGuestInvitationError,
    ResendGuestInvitationResponse,
    ResendPasswordResetData,
    ResendPasswordResetError,
    ResendPasswordResetResponse,
    ResendPersonCredentialRegistrationConfirmationData,
    ResendPersonCredentialRegistrationConfirmationError,
    ResendPersonCredentialRegistrationConfirmationResponse,
    ResetCredentialMfaPatchData,
    ResetCredentialMfaPatchError,
    ResetCredentialMfaPatchResponse,
    ResetCredentialMfaPutData,
    ResetCredentialMfaPutError,
    ResetCredentialMfaPutResponse,
    RevokeApiKeyData,
    RevokeApiKeyError,
    RevokeApiKeyResponse,
    RevokeOauth2ClientConsentForCallerData,
    RevokeOauth2ClientConsentForCallerError,
    RevokeOauth2ClientConsentForCallerResponse,
    RevokeRefreshTokenData,
    RevokeRefreshTokenError,
    RevokeRefreshTokenResponse,
    ScheduleMaintenanceCarPatchData,
    ScheduleMaintenanceCarPatchError,
    ScheduleMaintenanceCarPatchResponse,
    ScheduleMaintenanceCarPutData,
    ScheduleMaintenanceCarPutError,
    ScheduleMaintenanceCarPutResponse,
    SearchAllApiKeysForCallerData,
    SearchAllApiKeysForCallerError,
    SearchAllApiKeysForCallerResponse,
    SearchAllAuditsData,
    SearchAllAuditsError,
    SearchAllAuditsResponse2,
    SearchAllAvailableCarsData,
    SearchAllAvailableCarsError,
    SearchAllAvailableCarsResponse,
    SearchAllBookingsData,
    SearchAllBookingsError,
    SearchAllBookingsResponse2,
    SearchAllCarsData,
    SearchAllCarsError,
    SearchAllCarsResponse2,
    SearchAllCarUnavailabilitiesData,
    SearchAllCarUnavailabilitiesError,
    SearchAllCarUnavailabilitiesResponse2,
    SearchAllEmailDeliveriesData,
    SearchAllEmailDeliveriesError,
    SearchAllEmailDeliveriesResponse2,
    SearchAllEventNotificationsData,
    SearchAllEventNotificationsError,
    SearchAllEventNotificationsResponse2,
    SearchAllOauth2ClientsData,
    SearchAllOauth2ClientsError,
    SearchAllOauth2ClientsResponse,
    SearchAllSmsDeliveriesData,
    SearchAllSmsDeliveriesError,
    SearchAllSmsDeliveriesResponse2,
    SearchSubscriptionHistoryData,
    SearchSubscriptionHistoryError,
    SearchSubscriptionHistoryResponse2,
    SearchTestingOnlyData,
    SearchTestingOnlyError,
    SearchTestingOnlyResponse2,
    SendEmailData,
    SendEmailError,
    SendEmailResponse,
    SendSmsData,
    SendSmsError,
    SendSmsResponse,
    StatusesDeleteTestingOnlyError,
    StatusesDeleteTestingOnlyResponse,
    StatusesDeleteWithResponseTestingOnlyError,
    StatusesDeleteWithResponseTestingOnlyResponse,
    StatusesGetTestingOnlyError,
    StatusesGetTestingOnlyResponse,
    StatusesPostTestingOnlyData,
    StatusesPostTestingOnlyError,
    StatusesPostTestingOnlyResponse,
    StatusesPostWithLocationTestingOnlyData,
    StatusesPostWithLocationTestingOnlyError,
    StatusesPostWithLocationTestingOnlyResponse,
    StatusesPutPatchTestingOnlyPatchData,
    StatusesPutPatchTestingOnlyPatchError,
    StatusesPutPatchTestingOnlyPatchResponse,
    StatusesPutPatchTestingOnlyPutData,
    StatusesPutPatchTestingOnlyPutError,
    StatusesPutPatchTestingOnlyPutResponse,
    StatusesSearchTestingOnlyError,
    StatusesSearchTestingOnlyResponse,
    TakeOfflineCarPatchData,
    TakeOfflineCarPatchError,
    TakeOfflineCarPatchResponse,
    TakeOfflineCarPutData,
    TakeOfflineCarPutError,
    TakeOfflineCarPutResponse,
    TransferSubscriptionPatchData,
    TransferSubscriptionPatchError,
    TransferSubscriptionPatchResponse,
    TransferSubscriptionPutData,
    TransferSubscriptionPutError,
    TransferSubscriptionPutResponse,
    TwilioNotifyWebhookEventData,
    TwilioNotifyWebhookEventError,
    TwilioNotifyWebhookEventResponse,
    UnassignPlatformRolesPatchData,
    UnassignPlatformRolesPatchError,
    UnassignPlatformRolesPatchResponse,
    UnassignPlatformRolesPutData,
    UnassignPlatformRolesPutError,
    UnassignPlatformRolesPutResponse,
    UnassignRolesFromOrganizationPatchData,
    UnassignRolesFromOrganizationPatchError,
    UnassignRolesFromOrganizationPatchResponse,
    UnassignRolesFromOrganizationPutData,
    UnassignRolesFromOrganizationPutError,
    UnassignRolesFromOrganizationPutResponse,
    UnInviteMemberFromOrganizationData,
    UnInviteMemberFromOrganizationError,
    UnInviteMemberFromOrganizationResponse2,
    UpdateImagePatchData,
    UpdateImagePatchError,
    UpdateImagePatchResponse,
    UpdateImagePutData,
    UpdateImagePutError,
    UpdateImagePutResponse,
    UpdateOauth2ClientPatchData,
    UpdateOauth2ClientPatchError,
    UpdateOauth2ClientPatchResponse,
    UpdateOauth2ClientPutData,
    UpdateOauth2ClientPutError,
    UpdateOauth2ClientPutResponse,
    UploadImageData,
    UploadImageError,
    UploadImageResponse2,
    ValidationsUnvalidatedTestingOnlyData,
    ValidationsUnvalidatedTestingOnlyError,
    ValidationsUnvalidatedTestingOnlyResponse,
    ValidationsValidatedGetTestingOnlyData,
    ValidationsValidatedGetTestingOnlyError,
    ValidationsValidatedGetTestingOnlyResponse,
    ValidationsValidatedPostTestingOnlyData,
    ValidationsValidatedPostTestingOnlyError,
    ValidationsValidatedPostTestingOnlyResponse,
    VerifyCredentialMfaAuthenticatorForCallerPatchData,
    VerifyCredentialMfaAuthenticatorForCallerPatchError,
    VerifyCredentialMfaAuthenticatorForCallerPatchResponse,
    VerifyCredentialMfaAuthenticatorForCallerPutData,
    VerifyCredentialMfaAuthenticatorForCallerPutError,
    VerifyCredentialMfaAuthenticatorForCallerPutResponse,
    VerifyGuestInvitationData,
    VerifyGuestInvitationError,
    VerifyGuestInvitationResponse2,
    VerifyPasswordResetData,
    VerifyPasswordResetError,
    VerifyPasswordResetResponse
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Creates a new API key for the authenticated user, and expires all exisitng API keys
 * (request type: CreateAPIKeyRequest)
 */
export const createApiKey = <ThrowOnError extends boolean = false>(options?: Options<CreateApiKeyData, ThrowOnError>) =>
  (options?.client ?? client).post<CreateApiKeyResponse, CreateApiKeyError, ThrowOnError>({
      ...options,
      url: '/apikeys'
  });

/**
 * Lists all the API keys for the authenticated user
 * (request type: SearchAllAPIKeysForCallerRequest)
 */
export const searchAllApiKeysForCaller = <ThrowOnError extends boolean = false>(options?: Options<SearchAllApiKeysForCallerData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllApiKeysForCallerResponse, SearchAllApiKeysForCallerError, ThrowOnError>({
      ...options,
      url: '/apikeys'
  });

/**
 * Deletes the API key of the authenticated user
 * (request type: DeleteAPIKeyRequest)
 */
export const deleteApiKey = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteApiKeyResponse, DeleteApiKeyError, ThrowOnError>({
      ...options,
      url: '/apikeys/{Id}'
  });

/**
 * Revokes the API key
 * (request type: RevokeAPIKeyRequest)
 */
export const revokeApiKey = <ThrowOnError extends boolean = false>(options: Options<RevokeApiKeyData, ThrowOnError>) =>
  (options?.client ?? client).delete<RevokeApiKeyResponse, RevokeApiKeyError, ThrowOnError>({
      ...options,
      url: '/apikeys/{Id}/revoke'
  });

/**
 * Delivers an audit message
 * (request type: DeliverAuditRequest)
 */
export const deliverAudit = <ThrowOnError extends boolean = false>(options?: Options<DeliverAuditData, ThrowOnError>) =>
  (options?.client ?? client).post<DeliverAuditResponse, DeliverAuditError, ThrowOnError>({
      ...options,
      url: '/audits/deliver'
  });

/**
 * Drains all the pending audit messages
 * (request type: DrainAllAuditsRequest)
 */
export const drainAllAudits = <ThrowOnError extends boolean = false>(options?: Options<DrainAllAuditsData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllAuditsResponse, DrainAllAuditsError, ThrowOnError>({
      ...options,
      url: '/audits/drain'
  });

/**
 * Lists all audits since the specified date, for the specified organization
 * (request type: SearchAllAuditsRequest)
 */
export const searchAllAudits = <ThrowOnError extends boolean = false>(options?: Options<SearchAllAuditsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllAuditsResponse2, SearchAllAuditsError, ThrowOnError>({
      ...options,
      url: '/audits'
  });

/**
 * Refreshes the access_token for the specified refresh_token
 * (request type: RefreshTokenRequest)
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenData, ThrowOnError>) =>
  (options?.client ?? client).post<RefreshTokenResponse2, RefreshTokenError, ThrowOnError>({
      ...options,
      url: '/tokens/refresh'
  });

/**
 * Revoke a valid refresh_token
 * (request type: RevokeRefreshTokenRequest)
 */
export const revokeRefreshToken = <ThrowOnError extends boolean = false>(options: Options<RevokeRefreshTokenData, ThrowOnError>) =>
  (options?.client ?? client).delete<RevokeRefreshTokenResponse, RevokeRefreshTokenError, ThrowOnError>({
      ...options,
      url: '/tokens/{RefreshToken}'
  });

/**
 * Exports all the subscriptions created by the currently installed Billing Provider, that will need to be migrated by the next Billing Provider
 * (request type: ExportSubscriptionsToMigrateRequest)
 */
export const exportSubscriptionsToMigrate = <ThrowOnError extends boolean = false>(options?: Options<ExportSubscriptionsToMigrateData, ThrowOnError>) =>
  (options?.client ?? client).get<ExportSubscriptionsToMigrateResponse2, ExportSubscriptionsToMigrateError, ThrowOnError>({
      ...options,
      url: '/subscriptions/export'
  });

/**
 * Migrates an existing subscription from the previously installed Billing Provider to the currently installed Billing Provider
 * (request type: MigrateSubscriptionRequest)
 */
export const migrateSubscriptionPut = <ThrowOnError extends boolean = false>(options: Options<MigrateSubscriptionPutData, ThrowOnError>) =>
  (options?.client ?? client).put<MigrateSubscriptionPutResponse, MigrateSubscriptionPutError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/migrate'
  });

/**
 * Migrates an existing subscription from the previously installed Billing Provider to the currently installed Billing Provider
 * (request type: MigrateSubscriptionRequest)
 */
export const migrateSubscriptionPatch = <ThrowOnError extends boolean = false>(options: Options<MigrateSubscriptionPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<MigrateSubscriptionPatchResponse, MigrateSubscriptionPatchError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/migrate'
  });

/**
 * Cancels a booking
 * (request type: CancelBookingRequest)
 */
export const cancelBooking = <ThrowOnError extends boolean = false>(options: Options<CancelBookingData, ThrowOnError>) =>
  (options?.client ?? client).delete<CancelBookingResponse, CancelBookingError, ThrowOnError>({
      ...options,
      url: '/bookings/{Id}'
  });

/**
 * Makes a new booking for a specific car
 * (request type: MakeBookingRequest)
 */
export const makeBooking = <ThrowOnError extends boolean = false>(options?: Options<MakeBookingData, ThrowOnError>) =>
  (options?.client ?? client).post<MakeBookingResponse2, MakeBookingError, ThrowOnError>({
      ...options,
      url: '/bookings'
  });

/**
 * Lists all the bookings for all cars
 * (request type: SearchAllBookingsRequest)
 */
export const searchAllBookings = <ThrowOnError extends boolean = false>(options?: Options<SearchAllBookingsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllBookingsResponse2, SearchAllBookingsError, ThrowOnError>({
      ...options,
      url: '/bookings'
  });

/**
 * Deletes the specified car
 * (request type: DeleteCarRequest)
 */
export const deleteCar = <ThrowOnError extends boolean = false>(options: Options<DeleteCarData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteCarResponse, DeleteCarError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}'
  });

/**
 * Fetches the specified car
 * (request type: GetCarRequest)
 */
export const getCar = <ThrowOnError extends boolean = false>(options: Options<GetCarData, ThrowOnError>) =>
  (options?.client ?? client).get<GetCarResponse2, GetCarError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}'
  });

/**
 * Registers a new car
 * (request type: RegisterCarRequest)
 */
export const registerCar = <ThrowOnError extends boolean = false>(options?: Options<RegisterCarData, ThrowOnError>) =>
  (options?.client ?? client).post<RegisterCarResponse, RegisterCarError, ThrowOnError>({
      ...options,
      url: '/cars'
  });

/**
 * Lists all the cars
 * (request type: SearchAllCarsRequest)
 */
export const searchAllCars = <ThrowOnError extends boolean = false>(options?: Options<SearchAllCarsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllCarsResponse2, SearchAllCarsError, ThrowOnError>({
      ...options,
      url: '/cars'
  });

/**
 * Schedules the car for maintenance for the specified period
 * (request type: ScheduleMaintenanceCarRequest)
 */
export const scheduleMaintenanceCarPut = <ThrowOnError extends boolean = false>(options: Options<ScheduleMaintenanceCarPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ScheduleMaintenanceCarPutResponse, ScheduleMaintenanceCarPutError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}/maintain'
  });

/**
 * Schedules the car for maintenance for the specified period
 * (request type: ScheduleMaintenanceCarRequest)
 */
export const scheduleMaintenanceCarPatch = <ThrowOnError extends boolean = false>(options: Options<ScheduleMaintenanceCarPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ScheduleMaintenanceCarPatchResponse, ScheduleMaintenanceCarPatchError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}/maintain'
  });

/**
 * Lists all the available cars for the specified period
 * (request type: SearchAllAvailableCarsRequest)
 */
export const searchAllAvailableCars = <ThrowOnError extends boolean = false>(options?: Options<SearchAllAvailableCarsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllAvailableCarsResponse, SearchAllAvailableCarsError, ThrowOnError>({
      ...options,
      url: '/cars/available'
  });

/**
 * Lists all the periods for when the specified car is unavailable
 * (request type: SearchAllCarUnavailabilitiesRequest)
 */
export const searchAllCarUnavailabilities = <ThrowOnError extends boolean = false>(options: Options<SearchAllCarUnavailabilitiesData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllCarUnavailabilitiesResponse2, SearchAllCarUnavailabilitiesError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}/unavailabilities'
  });

/**
 * Reserves the car to go offline for the specified period
 * (request type: TakeOfflineCarRequest)
 */
export const takeOfflineCarPut = <ThrowOnError extends boolean = false>(options: Options<TakeOfflineCarPutData, ThrowOnError>) =>
  (options?.client ?? client).put<TakeOfflineCarPutResponse, TakeOfflineCarPutError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}/offline'
  });

/**
 * Reserves the car to go offline for the specified period
 * (request type: TakeOfflineCarRequest)
 */
export const takeOfflineCarPatch = <ThrowOnError extends boolean = false>(options: Options<TakeOfflineCarPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<TakeOfflineCarPatchResponse, TakeOfflineCarPatchError, ThrowOnError>({
      ...options,
      url: '/cars/{Id}/offline'
  });

/**
 * Notifies a Chargebee event, via a webhook
 * (request type: ChargebeeNotifyWebhookEventRequest)
 */
export const chargebeeNotifyWebhookEvent = <ThrowOnError extends boolean = false>(options?: Options<ChargebeeNotifyWebhookEventData, ThrowOnError>) =>
  (options?.client ?? client).post<ChargebeeNotifyWebhookEventResponse, ChargebeeNotifyWebhookEventError, ThrowOnError>({
      ...options,
      url: '/webhooks/chargebee'
  });

/**
 * Consent for the user to authorize the OAuth2/Open ID Connect client to access their data
 * (request type: ConsentOAuth2ClientForCallerRequest)
 */
export const consentOauth2ClientForCaller = <ThrowOnError extends boolean = false>(options: Options<ConsentOauth2ClientForCallerData, ThrowOnError>) =>
  (options?.client ?? client).post<ConsentOauth2ClientForCallerResponse, ConsentOauth2ClientForCallerError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}/consent'
  });

/**
 * Gets the user's consent status for an OAuth2/Open ID Connect client
 * (request type: GetOAuth2ClientConsentForCallerRequest)
 */
export const getOauth2ClientConsentForCaller = <ThrowOnError extends boolean = false>(options: Options<GetOauth2ClientConsentForCallerData, ThrowOnError>) =>
  (options?.client ?? client).get<GetOauth2ClientConsentForCallerResponse, GetOauth2ClientConsentForCallerError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}/consent'
  });

/**
 * Creates a new OAuth2/Open ID Connect client application
 * (request type: CreateOAuth2ClientRequest)
 */
export const createOauth2Client = <ThrowOnError extends boolean = false>(options?: Options<CreateOauth2ClientData, ThrowOnError>) =>
  (options?.client ?? client).post<CreateOauth2ClientResponse, CreateOauth2ClientError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients'
  });

/**
 * Lists all OAuth2/Open ID Connect clients
 * (request type: SearchAllOAuth2ClientsRequest)
 */
export const searchAllOauth2Clients = <ThrowOnError extends boolean = false>(options?: Options<SearchAllOauth2ClientsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllOauth2ClientsResponse, SearchAllOauth2ClientsError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients'
  });

/**
 * Deletes an OAuth2/Open ID Connect client
 * (request type: DeleteOAuth2ClientRequest)
 */
export const deleteOauth2Client = <ThrowOnError extends boolean = false>(options: Options<DeleteOauth2ClientData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteOauth2ClientResponse, DeleteOauth2ClientError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}'
  });

/**
 * Fetches an OAuth2/Open ID Connect client
 * (request type: GetOAuth2ClientRequest)
 */
export const getOauth2Client = <ThrowOnError extends boolean = false>(options: Options<GetOauth2ClientData, ThrowOnError>) =>
  (options?.client ?? client).get<GetOauth2ClientResponse, GetOauth2ClientError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}'
  });

/**
 * Updates an existing OAuth2/Open ID Connect client
 * (request type: UpdateOAuth2ClientRequest)
 */
export const updateOauth2ClientPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOauth2ClientPutData, ThrowOnError>) =>
  (options?.client ?? client).put<UpdateOauth2ClientPutResponse, UpdateOauth2ClientPutError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}'
  });

/**
 * Updates an existing OAuth2/Open ID Connect client
 * (request type: UpdateOAuth2ClientRequest)
 */
export const updateOauth2ClientPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateOauth2ClientPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<UpdateOauth2ClientPatchResponse, UpdateOauth2ClientPatchError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}'
  });

/**
 * Regenerates the client secret for an OAuth2/Open ID Connect client
 * (request type: RegenerateOAuth2ClientSecretRequest)
 */
export const regenerateOauth2ClientSecret = <ThrowOnError extends boolean = false>(options: Options<RegenerateOauth2ClientSecretData, ThrowOnError>) =>
  (options?.client ?? client).post<RegenerateOauth2ClientSecretResponse, RegenerateOauth2ClientSecretError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}/secret'
  });

/**
 * Revokes the user's consent for an OAuth2/Open ID Connect client
 * (request type: RevokeOAuth2ClientConsentForCallerRequest)
 */
export const revokeOauth2ClientConsentForCaller = <ThrowOnError extends boolean = false>(options: Options<RevokeOauth2ClientConsentForCallerData, ThrowOnError>) =>
  (options?.client ?? client).delete<RevokeOauth2ClientConsentForCallerResponse, RevokeOauth2ClientConsentForCallerError, ThrowOnError>({
      ...options,
      url: '/oauth2/clients/{Id}/consent/revoke'
  });

/**
 * Authenticates a user with a username and password
 * (request type: AuthenticateCredentialRequest)
 */
export const authenticateCredential = <ThrowOnError extends boolean = false>(options?: Options<AuthenticateCredentialData, ThrowOnError>) =>
  (options?.client ?? client).post<AuthenticateCredentialResponse, AuthenticateCredentialError, ThrowOnError>({
      ...options,
      url: '/credentials/auth'
  });

/**
 * Completes a password reset attempt
 * (request type: CompleteCredentialResetRequest)
 */
export const completeCredentialReset = <ThrowOnError extends boolean = false>(options: Options<CompleteCredentialResetData, ThrowOnError>) =>
  (options?.client ?? client).post<CompleteCredentialResetResponse, CompleteCredentialResetError, ThrowOnError>({
      ...options,
      url: '/credentials/{Token}/reset/complete'
  });

/**
 * Confirms the registration of a new person (verifying their email address)
 * (request type: ConfirmPersonCredentialRegistrationRequest)
 */
export const confirmPersonCredentialRegistration = <ThrowOnError extends boolean = false>(options?: Options<ConfirmPersonCredentialRegistrationData, ThrowOnError>) =>
  (options?.client ?? client).post<ConfirmPersonCredentialRegistrationResponse, ConfirmPersonCredentialRegistrationError, ThrowOnError>({
      ...options,
      url: '/credentials/confirm-registration'
  });

/**
 * Fetches the confirmation token for a registration of a person
 * (request type: GetPersonCredentialRegistrationConfirmationRequest)
 */
export const getPersonCredentialRegistrationConfirmation = <ThrowOnError extends boolean = false>(options: Options<GetPersonCredentialRegistrationConfirmationData, ThrowOnError>) =>
  (options?.client ?? client).get<GetPersonCredentialRegistrationConfirmationResponse2, GetPersonCredentialRegistrationConfirmationError, ThrowOnError>({
      ...options,
      url: '/credentials/confirm-registration'
  });

/**
 * Renews and resends a confirmation email for confirming the registration of a person
 * (request type: ResendPersonCredentialRegistrationConfirmationRequest)
 */
export const resendPersonCredentialRegistrationConfirmation = <ThrowOnError extends boolean = false>(options?: Options<ResendPersonCredentialRegistrationConfirmationData, ThrowOnError>) =>
  (options?.client ?? client).post<ResendPersonCredentialRegistrationConfirmationResponse, ResendPersonCredentialRegistrationConfirmationError, ThrowOnError>({
      ...options,
      url: '/credentials/resend-confirmation'
  });

/**
 * Registers a new person on the platform
 * (request type: RegisterPersonCredentialRequest)
 */
export const registerPersonCredential = <ThrowOnError extends boolean = false>(options?: Options<RegisterPersonCredentialData, ThrowOnError>) =>
  (options?.client ?? client).post<RegisterPersonCredentialResponse2, RegisterPersonCredentialError, ThrowOnError>({
      ...options,
      url: '/credentials/register'
  });

/**
 * Begins a password reset attempt
 * (request type: InitiatePasswordResetRequest)
 */
export const initiatePasswordReset = <ThrowOnError extends boolean = false>(options?: Options<InitiatePasswordResetData, ThrowOnError>) =>
  (options?.client ?? client).post<InitiatePasswordResetResponse, InitiatePasswordResetError, ThrowOnError>({
      ...options,
      url: '/credentials/reset'
  });

/**
 * Resends a password reset attempt (via email)
 * (request type: ResendPasswordResetRequest)
 */
export const resendPasswordReset = <ThrowOnError extends boolean = false>(options: Options<ResendPasswordResetData, ThrowOnError>) =>
  (options?.client ?? client).post<ResendPasswordResetResponse, ResendPasswordResetError, ThrowOnError>({
      ...options,
      url: '/credentials/{Token}/reset/resend'
  });

/**
 * Verifies that the password reset attempt is still valid
 * (request type: VerifyPasswordResetRequest)
 */
export const verifyPasswordReset = <ThrowOnError extends boolean = false>(options: Options<VerifyPasswordResetData, ThrowOnError>) =>
  (options?.client ?? client).get<VerifyPasswordResetResponse, VerifyPasswordResetError, ThrowOnError>({
      ...options,
      url: '/credentials/{Token}/reset/verify'
  });

/**
 * Drains all the pending event notifications
 * (request type: DrainAllEventNotificationsRequest)
 */
export const drainAllEventNotifications = <ThrowOnError extends boolean = false>(options?: Options<DrainAllEventNotificationsData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllEventNotificationsResponse, DrainAllEventNotificationsError, ThrowOnError>({
      ...options,
      url: '/event_notifications/drain'
  });

/**
 * Notifies when a domain_event has been raised to a subscriber
 * (request type: NotifyDomainEventRequest)
 */
export const notifyDomainEvent = <ThrowOnError extends boolean = false>(options?: Options<NotifyDomainEventData, ThrowOnError>) =>
  (options?.client ?? client).post<NotifyDomainEventResponse, NotifyDomainEventError, ThrowOnError>({
      ...options,
      url: '/event_notifications'
  });

/**
 * Lists all event notifications
 * (request type: SearchAllEventNotificationsRequest)
 */
export const searchAllEventNotifications = <ThrowOnError extends boolean = false>(options?: Options<SearchAllEventNotificationsData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllEventNotificationsResponse2, SearchAllEventNotificationsError, ThrowOnError>({
      ...options,
      url: '/event_notifications'
  });

/**
 * Confirms the delivery of a sent email message
 * (request type: ConfirmEmailDeliveredRequest)
 */
export const confirmEmailDelivered = <ThrowOnError extends boolean = false>(options?: Options<ConfirmEmailDeliveredData, ThrowOnError>) =>
  (options?.client ?? client).post<ConfirmEmailDeliveredResponse, ConfirmEmailDeliveredError, ThrowOnError>({
      ...options,
      url: '/emails/delivered'
  });

/**
 * Confirms the failed delivery of a sent email message
 * (request type: ConfirmEmailDeliveryFailedRequest)
 */
export const confirmEmailDeliveryFailed = <ThrowOnError extends boolean = false>(options?: Options<ConfirmEmailDeliveryFailedData, ThrowOnError>) =>
  (options?.client ?? client).post<ConfirmEmailDeliveryFailedResponse, ConfirmEmailDeliveryFailedError, ThrowOnError>({
      ...options,
      url: '/emails/failed'
  });

/**
 * Drains all the pending email messages
 * (request type: DrainAllEmailsRequest)
 */
export const drainAllEmails = <ThrowOnError extends boolean = false>(options?: Options<DrainAllEmailsData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllEmailsResponse, DrainAllEmailsError, ThrowOnError>({
      ...options,
      url: '/emails/drain'
  });

/**
 * Lists all email deliveries since the specified date, for the specified timeframe, organization and tags
 * (request type: SearchAllEmailDeliveriesRequest)
 */
export const searchAllEmailDeliveries = <ThrowOnError extends boolean = false>(options?: Options<SearchAllEmailDeliveriesData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllEmailDeliveriesResponse2, SearchAllEmailDeliveriesError, ThrowOnError>({
      ...options,
      url: '/emails'
  });

/**
 * Sends an email message for delivery
 * (request type: SendEmailRequest)
 */
export const sendEmail = <ThrowOnError extends boolean = false>(options?: Options<SendEmailData, ThrowOnError>) =>
  (options?.client ?? client).post<SendEmailResponse, SendEmailError, ThrowOnError>({
      ...options,
      url: '/emails/send'
  });

/**
 * Assigns the specified roles to the specified user
 * (request type: AssignPlatformRolesRequest)
 */
export const assignPlatformRoles = <ThrowOnError extends boolean = false>(options: Options<AssignPlatformRolesData, ThrowOnError>) =>
  (options?.client ?? client).post<AssignPlatformRolesResponse, AssignPlatformRolesError, ThrowOnError>({
      ...options,
      url: '/users/{Id}/roles'
  });

/**
 * Removes the specified roles from the specified user
 * (request type: UnassignPlatformRolesRequest)
 */
export const unassignPlatformRolesPut = <ThrowOnError extends boolean = false>(options: Options<UnassignPlatformRolesPutData, ThrowOnError>) =>
  (options?.client ?? client).put<UnassignPlatformRolesPutResponse, UnassignPlatformRolesPutError, ThrowOnError>({
      ...options,
      url: '/users/{Id}/roles'
  });

/**
 * Removes the specified roles from the specified user
 * (request type: UnassignPlatformRolesRequest)
 */
export const unassignPlatformRolesPatch = <ThrowOnError extends boolean = false>(options: Options<UnassignPlatformRolesPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<UnassignPlatformRolesPatchResponse, UnassignPlatformRolesPatchError, ThrowOnError>({
      ...options,
      url: '/users/{Id}/roles'
  });

/**
 * Fetches the named feature flag, for all users, or for a specific user, and optionally for a specific tenancy
 * (request type: GetFeatureFlagRequest)
 */
export const getFeatureFlag = <ThrowOnError extends boolean = false>(options: Options<GetFeatureFlagData, ThrowOnError>) =>
  (options?.client ?? client).get<GetFeatureFlagResponse2, GetFeatureFlagError, ThrowOnError>({
      ...options,
      url: '/flags/{UserId}/{Name}'
  });

/**
 * Lists all the available feature flags
 * (request type: GetAllFeatureFlagsRequest)
 */
export const getAllFeatureFlags = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetAllFeatureFlagsResponse2, GetAllFeatureFlagsError, ThrowOnError>({
      ...options,
      url: '/flags'
  });

/**
 * Fetches the named feature flag for the current authenticated user
 * (request type: GetFeatureFlagForCallerRequest)
 */
export const getFeatureFlagForCaller = <ThrowOnError extends boolean = false>(options: Options<GetFeatureFlagForCallerData, ThrowOnError>) =>
  (options?.client ?? client).get<GetFeatureFlagForCallerResponse, GetFeatureFlagForCallerError, ThrowOnError>({
      ...options,
      url: '/flags/{Name}'
  });

/**
 * Displays the health of the API
 * (request type: HealthCheckRequest)
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<HealthCheckResponse2, HealthCheckError, ThrowOnError>({
      ...options,
      url: '/health'
  });

/**
 * Fetches identity details of the user
 * (request type: GetIdentityForCallerRequest)
 */
export const getIdentityForCaller = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetIdentityForCallerResponse, GetIdentityForCallerError, ThrowOnError>({
      ...options,
      url: '/users/me'
  });

/**
 * Deletes the image
 * (request type: DeleteImageRequest)
 */
export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteImageResponse, DeleteImageError, ThrowOnError>({
      ...options,
      url: '/images/{Id}'
  });

/**
 * Fetches the details about the image
 * (request type: GetImageRequest)
 */
export const getImage = <ThrowOnError extends boolean = false>(options: Options<GetImageData, ThrowOnError>) =>
  (options?.client ?? client).get<GetImageResponse2, GetImageError, ThrowOnError>({
      ...options,
      url: '/images/{Id}'
  });

/**
 * Changes the image details
 * (request type: UpdateImageRequest)
 */
export const updateImagePut = <ThrowOnError extends boolean = false>(options: Options<UpdateImagePutData, ThrowOnError>) =>
  (options?.client ?? client).put<UpdateImagePutResponse, UpdateImagePutError, ThrowOnError>({
      ...options,
      url: '/images/{Id}'
  });

/**
 * Changes the image details
 * (request type: UpdateImageRequest)
 */
export const updateImagePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateImagePatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<UpdateImagePatchResponse, UpdateImagePatchError, ThrowOnError>({
      ...options,
      url: '/images/{Id}'
  });

/**
 * Downloads the raw image
 * (request type: DownloadImageRequest)
 */
export const downloadImage = <ThrowOnError extends boolean = false>(options: Options<DownloadImageData, ThrowOnError>) =>
  (options?.client ?? client).get<DownloadImageResponse, DownloadImageError, ThrowOnError>({
      ...options,
      url: '/images/{Id}/download'
  });

/**
 * Uploads a new image. Can be one of the following types: jpg, jpeg, png, gif
 * (request type: UploadImageRequest)
 */
export const uploadImage = <ThrowOnError extends boolean = false>(options?: Options<UploadImageData, ThrowOnError>) =>
  (options?.client ?? client).post<UploadImageResponse2, UploadImageError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/images'
  });

/**
 * Invites the specified person (via email address) to the platform
 * (request type: InviteGuestRequest)
 */
export const inviteGuest = <ThrowOnError extends boolean = false>(options?: Options<InviteGuestData, ThrowOnError>) =>
  (options?.client ?? client).post<InviteGuestResponse2, InviteGuestError, ThrowOnError>({
      ...options,
      url: '/invitations'
  });

/**
 * Resends the invitation to the specified person to the platform
 * (request type: ResendGuestInvitationRequest)
 */
export const resendGuestInvitation = <ThrowOnError extends boolean = false>(options: Options<ResendGuestInvitationData, ThrowOnError>) =>
  (options?.client ?? client).post<ResendGuestInvitationResponse, ResendGuestInvitationError, ThrowOnError>({
      ...options,
      url: '/invitations/{Token}/resend'
  });

/**
 * Verifies that the guest invitation is still valid
 * (request type: VerifyGuestInvitationRequest)
 */
export const verifyGuestInvitation = <ThrowOnError extends boolean = false>(options: Options<VerifyGuestInvitationData, ThrowOnError>) =>
  (options?.client ?? client).get<VerifyGuestInvitationResponse2, VerifyGuestInvitationError, ThrowOnError>({
      ...options,
      url: '/invitations/{Token}/verify'
  });

/**
 * Register a new machine user on the platform
 * (request type: RegisterMachineRequest)
 */
export const registerMachine = <ThrowOnError extends boolean = false>(options?: Options<RegisterMachineData, ThrowOnError>) =>
  (options?.client ?? client).post<RegisterMachineResponse2, RegisterMachineError, ThrowOnError>({
      ...options,
      url: '/machines/register'
  });

/**
 * Notifies a Mailgun event, via a webhook
 * (request type: MailgunNotifyWebhookEventRequest)
 */
export const mailgunNotifyWebhookEvent = <ThrowOnError extends boolean = false>(options?: Options<MailgunNotifyWebhookEventData, ThrowOnError>) =>
  (options?.client ?? client).post<MailgunNotifyWebhookEventResponse, MailgunNotifyWebhookEventError, ThrowOnError>({
      ...options,
      url: '/webhooks/mailgun'
  });

/**
 * Changes the default organization for the authenticated user
 * (request type: ChangeDefaultOrganizationRequest)
 */
export const changeDefaultOrganizationPut = <ThrowOnError extends boolean = false>(options?: Options<ChangeDefaultOrganizationPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeDefaultOrganizationPutResponse, ChangeDefaultOrganizationPutError, ThrowOnError>({
      ...options,
      url: '/memberships/me/default'
  });

/**
 * Changes the default organization for the authenticated user
 * (request type: ChangeDefaultOrganizationRequest)
 */
export const changeDefaultOrganizationPatch = <ThrowOnError extends boolean = false>(options?: Options<ChangeDefaultOrganizationPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeDefaultOrganizationPatchResponse, ChangeDefaultOrganizationPatchError, ThrowOnError>({
      ...options,
      url: '/memberships/me/default'
  });

/**
 * List the memberships for the authenticated user
 * (request type: ListMembershipsForCallerRequest)
 */
export const listMembershipsForCaller = <ThrowOnError extends boolean = false>(options?: Options<ListMembershipsForCallerData, ThrowOnError>) =>
  (options?.client ?? client).get<ListMembershipsForCallerResponse2, ListMembershipsForCallerError, ThrowOnError>({
      ...options,
      url: '/memberships/me'
  });

/**
 * Associates another MFA authentication factor to the user. Depending on the specific authenticator, this can send an SMS or email to the user containing a secret code.
 * (request type: AssociateCredentialMfaAuthenticatorForCallerRequest)
 */
export const associateCredentialMfaAuthenticatorForCaller = <ThrowOnError extends boolean = false>(options?: Options<AssociateCredentialMfaAuthenticatorForCallerData, ThrowOnError>) =>
  (options?.client ?? client).post<AssociateCredentialMfaAuthenticatorForCallerResponse2, AssociateCredentialMfaAuthenticatorForCallerError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators'
  });

/**
 * Fetches the MFA authenticators for the user
 * (request type: ListCredentialMfaAuthenticatorsForCallerRequest)
 */
export const listCredentialMfaAuthenticatorsForCaller = <ThrowOnError extends boolean = false>(options?: Options<ListCredentialMfaAuthenticatorsForCallerData, ThrowOnError>) =>
  (options?.client ?? client).get<ListCredentialMfaAuthenticatorsForCallerResponse2, ListCredentialMfaAuthenticatorsForCallerError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators'
  });

/**
 * Challenges an MFA authenticator for the user. Depending on the specific authenticator, this can send an SMS or email to the user containing a secret code.
 * (request type: ChallengeCredentialMfaAuthenticatorForCallerRequest)
 */
export const challengeCredentialMfaAuthenticatorForCallerPut = <ThrowOnError extends boolean = false>(options: Options<ChallengeCredentialMfaAuthenticatorForCallerPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChallengeCredentialMfaAuthenticatorForCallerPutResponse, ChallengeCredentialMfaAuthenticatorForCallerPutError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorId}/challenge'
  });

/**
 * Challenges an MFA authenticator for the user. Depending on the specific authenticator, this can send an SMS or email to the user containing a secret code.
 * (request type: ChallengeCredentialMfaAuthenticatorForCallerRequest)
 */
export const challengeCredentialMfaAuthenticatorForCallerPatch = <ThrowOnError extends boolean = false>(options: Options<ChallengeCredentialMfaAuthenticatorForCallerPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChallengeCredentialMfaAuthenticatorForCallerPatchResponse, ChallengeCredentialMfaAuthenticatorForCallerPatchError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorId}/challenge'
  });

/**
 * Changes whether the user is MFA enabled or not
 * (request type: ChangeCredentialMfaForCallerRequest)
 */
export const changeCredentialMfaForCallerPut = <ThrowOnError extends boolean = false>(options?: Options<ChangeCredentialMfaForCallerPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeCredentialMfaForCallerPutResponse, ChangeCredentialMfaForCallerPutError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa'
  });

/**
 * Changes whether the user is MFA enabled or not
 * (request type: ChangeCredentialMfaForCallerRequest)
 */
export const changeCredentialMfaForCallerPatch = <ThrowOnError extends boolean = false>(options?: Options<ChangeCredentialMfaForCallerPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeCredentialMfaForCallerPatchResponse, ChangeCredentialMfaForCallerPatchError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa'
  });

/**
 * Confirms the association of an MFA authenticator for the user, and authenticates the user.
 * (request type: ConfirmCredentialMfaAuthenticatorForCallerRequest)
 */
export const confirmCredentialMfaAuthenticatorForCallerPut = <ThrowOnError extends boolean = false>(options: Options<ConfirmCredentialMfaAuthenticatorForCallerPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ConfirmCredentialMfaAuthenticatorForCallerPutResponse, ConfirmCredentialMfaAuthenticatorForCallerPutError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorType}/confirm'
  });

/**
 * Confirms the association of an MFA authenticator for the user, and authenticates the user.
 * (request type: ConfirmCredentialMfaAuthenticatorForCallerRequest)
 */
export const confirmCredentialMfaAuthenticatorForCallerPatch = <ThrowOnError extends boolean = false>(options: Options<ConfirmCredentialMfaAuthenticatorForCallerPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ConfirmCredentialMfaAuthenticatorForCallerPatchResponse, ConfirmCredentialMfaAuthenticatorForCallerPatchError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorType}/confirm'
  });

/**
 * Disassociates an associated MFA authenticator from the user
 * (request type: DisassociateCredentialMfaAuthenticatorForCallerRequest)
 */
export const disassociateCredentialMfaAuthenticatorForCaller = <ThrowOnError extends boolean = false>(options: Options<DisassociateCredentialMfaAuthenticatorForCallerData, ThrowOnError>) =>
  (options?.client ?? client).delete<DisassociateCredentialMfaAuthenticatorForCallerResponse, DisassociateCredentialMfaAuthenticatorForCallerError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{Id}'
  });

/**
 * Resets the user MFA status back to the default for all users
 * (request type: ResetCredentialMfaRequest)
 */
export const resetCredentialMfaPut = <ThrowOnError extends boolean = false>(options?: Options<ResetCredentialMfaPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ResetCredentialMfaPutResponse, ResetCredentialMfaPutError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/reset'
  });

/**
 * Resets the user MFA status back to the default for all users
 * (request type: ResetCredentialMfaRequest)
 */
export const resetCredentialMfaPatch = <ThrowOnError extends boolean = false>(options?: Options<ResetCredentialMfaPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ResetCredentialMfaPatchResponse, ResetCredentialMfaPatchError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/reset'
  });

/**
 * Verifies an MFA authenticator for the user, and authenticates the user.
 * (request type: VerifyCredentialMfaAuthenticatorForCallerRequest)
 */
export const verifyCredentialMfaAuthenticatorForCallerPut = <ThrowOnError extends boolean = false>(options: Options<VerifyCredentialMfaAuthenticatorForCallerPutData, ThrowOnError>) =>
  (options?.client ?? client).put<VerifyCredentialMfaAuthenticatorForCallerPutResponse, VerifyCredentialMfaAuthenticatorForCallerPutError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorType}/verify'
  });

/**
 * Verifies an MFA authenticator for the user, and authenticates the user.
 * (request type: VerifyCredentialMfaAuthenticatorForCallerRequest)
 */
export const verifyCredentialMfaAuthenticatorForCallerPatch = <ThrowOnError extends boolean = false>(options: Options<VerifyCredentialMfaAuthenticatorForCallerPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<VerifyCredentialMfaAuthenticatorForCallerPatchResponse, VerifyCredentialMfaAuthenticatorForCallerPatchError, ThrowOnError>({
      ...options,
      url: '/credentials/mfa/authenticators/{AuthenticatorType}/verify'
  });

/**
 * Authorizes the user to access the application in Open ID Connect
 * (request type: AuthorizeOAuth2GetRequest)
 */
export const authorizeOauth2Get = <ThrowOnError extends boolean = false>(options: Options<AuthorizeOauth2GetData, ThrowOnError>) =>
  (options?.client ?? client).get<AuthorizeOauth2GetResponse, AuthorizeOauth2GetError, ThrowOnError>({
      ...options,
      url: '/oauth2/authorize'
  });

/**
 * Authorizes the user to access the application in Open ID Connect
 * (request type: AuthorizeOAuth2PostRequest)
 */
export const authorizeOauth2Post = <ThrowOnError extends boolean = false>(options?: Options<AuthorizeOauth2PostData, ThrowOnError>) =>
  (options?.client ?? client).post<AuthorizeOauth2PostResponse, AuthorizeOauth2PostError, ThrowOnError>({
      ...options,
      ...urlSearchParamsBodySerializer,
      headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          ...options?.headers
      },
      url: '/oauth2/authorize'
  });

/**
 * Exchanges either an authorization code for new tokens, or a refresh_token for new tokens, for the specified grant_type in Open ID Connect
 * (request type: ExchangeOAuth2ForTokensRequest)
 */
export const exchangeOauth2ForTokens = <ThrowOnError extends boolean = false>(options?: Options<ExchangeOauth2ForTokensData, ThrowOnError>) =>
  (options?.client ?? client).post<ExchangeOauth2ForTokensResponse, ExchangeOauth2ForTokensError, ThrowOnError>({
      ...options,
      ...urlSearchParamsBodySerializer,
      headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          ...options?.headers
      },
      url: '/oauth2/token'
  });

/**
 * Fetches the user's info for the authenticated user in Open ID Connect format
 * (request type: GetUserInfoForCallerRequest)
 */
export const getUserInfoForCaller = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetUserInfoForCallerResponse2, GetUserInfoForCallerError, ThrowOnError>({
      ...options,
      url: '/oauth2/userinfo'
  });

/**
 * Fetches the discovery document for Open ID Connect
 * (request type: GetDiscoveryDocumentRequest)
 */
export const getDiscoveryDocument = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetDiscoveryDocumentResponse2, GetDiscoveryDocumentError, ThrowOnError>({
      ...options,
      url: '/.well-known/openid-configuration'
  });

/**
 * Fetches the JSON Web Key Set for Open ID Connect JWT verification
 * (request type: GetJsonWebKeySetRequest)
 */
export const getJsonWebKeySet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetJsonWebKeySetResponse2, GetJsonWebKeySetError, ThrowOnError>({
      ...options,
      url: '/.well-known/jwks.json'
  });

/**
 * Assigns a list of roles to a member of an organization
 * (request type: AssignRolesToOrganizationRequest)
 */
export const assignRolesToOrganizationPut = <ThrowOnError extends boolean = false>(options: Options<AssignRolesToOrganizationPutData, ThrowOnError>) =>
  (options?.client ?? client).put<AssignRolesToOrganizationPutResponse, AssignRolesToOrganizationPutError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/roles/assign'
  });

/**
 * Assigns a list of roles to a member of an organization
 * (request type: AssignRolesToOrganizationRequest)
 */
export const assignRolesToOrganizationPatch = <ThrowOnError extends boolean = false>(options: Options<AssignRolesToOrganizationPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<AssignRolesToOrganizationPatchResponse, AssignRolesToOrganizationPatchError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/roles/assign'
  });

/**
 * Uploads a new avatar for the organization
 * (request type: ChangeOrganizationAvatarRequest)
 */
export const changeOrganizationAvatarPut = <ThrowOnError extends boolean = false>(options: Options<ChangeOrganizationAvatarPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeOrganizationAvatarPutResponse, ChangeOrganizationAvatarPutError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/organizations/{Id}/avatar'
  });

/**
 * Uploads a new avatar for the organization
 * (request type: ChangeOrganizationAvatarRequest)
 */
export const changeOrganizationAvatarPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeOrganizationAvatarPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeOrganizationAvatarPatchResponse, ChangeOrganizationAvatarPatchError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/organizations/{Id}/avatar'
  });

/**
 * Removes the avatar of the organization
 * (request type: DeleteOrganizationAvatarRequest)
 */
export const deleteOrganizationAvatar = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationAvatarData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteOrganizationAvatarResponse, DeleteOrganizationAvatarError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/avatar'
  });

/**
 * Changes the profile of the organization
 * (request type: ChangeOrganizationRequest)
 */
export const changeOrganizationPut = <ThrowOnError extends boolean = false>(options: Options<ChangeOrganizationPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeOrganizationPutResponse, ChangeOrganizationPutError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}'
  });

/**
 * Changes the profile of the organization
 * (request type: ChangeOrganizationRequest)
 */
export const changeOrganizationPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeOrganizationPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeOrganizationPatchResponse, ChangeOrganizationPatchError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}'
  });

/**
 * Deletes the organization
 * (request type: DeleteOrganizationRequest)
 */
export const deleteOrganization = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteOrganizationResponse, DeleteOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}'
  });

/**
 * Fetches the profile of the organization
 * (request type: GetOrganizationRequest)
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).get<GetOrganizationResponse2, GetOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}'
  });

/**
 * Creates a new organization to share with other users
 * (request type: CreateOrganizationRequest)
 */
export const createOrganization = <ThrowOnError extends boolean = false>(options?: Options<CreateOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).post<CreateOrganizationResponse, CreateOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations'
  });

/**
 * Fetches the settings for an organization
 * (request type: GetOrganizationSettingsRequest)
 */
export const getOrganizationSettings = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationSettingsData, ThrowOnError>) =>
  (options?.client ?? client).get<GetOrganizationSettingsResponse2, GetOrganizationSettingsError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/settings'
  });

/**
 * Invites a new member to the organization, either by email address, or by their user ID (if known)
 * (request type: InviteMemberToOrganizationRequest)
 */
export const inviteMemberToOrganization = <ThrowOnError extends boolean = false>(options: Options<InviteMemberToOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).post<InviteMemberToOrganizationResponse2, InviteMemberToOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/members'
  });

/**
 * Fetches all the members of the organization
 * (request type: ListMembersForOrganizationRequest)
 */
export const listMembersForOrganization = <ThrowOnError extends boolean = false>(options: Options<ListMembersForOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).get<ListMembersForOrganizationResponse2, ListMembersForOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/members'
  });

/**
 * Unassigns the list of roles from a member of an organization
 * (request type: UnassignRolesFromOrganizationRequest)
 */
export const unassignRolesFromOrganizationPut = <ThrowOnError extends boolean = false>(options: Options<UnassignRolesFromOrganizationPutData, ThrowOnError>) =>
  (options?.client ?? client).put<UnassignRolesFromOrganizationPutResponse, UnassignRolesFromOrganizationPutError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/roles/unassign'
  });

/**
 * Unassigns the list of roles from a member of an organization
 * (request type: UnassignRolesFromOrganizationRequest)
 */
export const unassignRolesFromOrganizationPatch = <ThrowOnError extends boolean = false>(options: Options<UnassignRolesFromOrganizationPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<UnassignRolesFromOrganizationPatchResponse, UnassignRolesFromOrganizationPatchError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/roles/unassign'
  });

/**
 * Removes a previously invited member from the organization
 * (request type: UnInviteMemberFromOrganizationRequest)
 */
export const unInviteMemberFromOrganization = <ThrowOnError extends boolean = false>(options: Options<UnInviteMemberFromOrganizationData, ThrowOnError>) =>
  (options?.client ?? client).delete<UnInviteMemberFromOrganizationResponse2, UnInviteMemberFromOrganizationError, ThrowOnError>({
      ...options,
      url: '/organizations/{Id}/members/{UserId}'
  });

/**
 * List all the pricing plans available for this product
 * (request type: ListPricingPlansRequest)
 */
export const listPricingPlans = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<ListPricingPlansResponse2, ListPricingPlansError, ThrowOnError>({
      ...options,
      url: '/pricing/plans'
  });

/**
 * Drains all the pending provisioning messages
 * (request type: DrainAllProvisioningsRequest)
 */
export const drainAllProvisionings = <ThrowOnError extends boolean = false>(options?: Options<DrainAllProvisioningsData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllProvisioningsResponse, DrainAllProvisioningsError, ThrowOnError>({
      ...options,
      url: '/provisioning/drain'
  });

/**
 * Notifies when provisioning of a service has been completed
 * (request type: NotifyProvisioningRequest)
 */
export const notifyProvisioning = <ThrowOnError extends boolean = false>(options?: Options<NotifyProvisioningData, ThrowOnError>) =>
  (options?.client ?? client).post<NotifyProvisioningResponse, NotifyProvisioningError, ThrowOnError>({
      ...options,
      url: '/provisioning/notify'
  });

/**
 * Measures an event in the product
 * (request type: RecordMeasureRequest)
 */
export const recordMeasure = <ThrowOnError extends boolean = false>(options?: Options<RecordMeasureData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordMeasureResponse, RecordMeasureError, ThrowOnError>({
      ...options,
      url: '/record/measure'
  });

/**
 * Records a usage of the product
 * (request type: RecordUseRequest)
 */
export const recordUse = <ThrowOnError extends boolean = false>(options?: Options<RecordUseData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordUseResponse, RecordUseError, ThrowOnError>({
      ...options,
      url: '/record/use'
  });

/**
 * Authenticates a user with authorization code from a OAuth2 or Open ID Connect single sign-on provider, and auto-registering them the first time
 * (request type: AuthenticateSingleSignOnRequest)
 */
export const authenticateSingleSignOn = <ThrowOnError extends boolean = false>(options?: Options<AuthenticateSingleSignOnData, ThrowOnError>) =>
  (options?.client ?? client).post<AuthenticateSingleSignOnResponse, AuthenticateSingleSignOnError, ThrowOnError>({
      ...options,
      url: '/sso/auth'
  });

/**
 * Confirms the delivery of a sent SMS message
 * (request type: ConfirmSmsDeliveredRequest)
 */
export const confirmSmsDelivered = <ThrowOnError extends boolean = false>(options?: Options<ConfirmSmsDeliveredData, ThrowOnError>) =>
  (options?.client ?? client).post<ConfirmSmsDeliveredResponse, ConfirmSmsDeliveredError, ThrowOnError>({
      ...options,
      url: '/smses/delivered'
  });

/**
 * Confirms the failed delivery of a sent SMS message
 * (request type: ConfirmSmsDeliveryFailedRequest)
 */
export const confirmSmsDeliveryFailed = <ThrowOnError extends boolean = false>(options?: Options<ConfirmSmsDeliveryFailedData, ThrowOnError>) =>
  (options?.client ?? client).post<ConfirmSmsDeliveryFailedResponse, ConfirmSmsDeliveryFailedError, ThrowOnError>({
      ...options,
      url: '/smses/failed'
  });

/**
 * Drains all the pending SMS messages
 * (request type: DrainAllSmsesRequest)
 */
export const drainAllSmses = <ThrowOnError extends boolean = false>(options?: Options<DrainAllSmsesData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllSmsesResponse, DrainAllSmsesError, ThrowOnError>({
      ...options,
      url: '/smses/drain'
  });

/**
 * Lists all SMS deliveries since the specified date, for the specified timeframe, organization and tags
 * (request type: SearchAllSmsDeliveriesRequest)
 */
export const searchAllSmsDeliveries = <ThrowOnError extends boolean = false>(options?: Options<SearchAllSmsDeliveriesData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchAllSmsDeliveriesResponse2, SearchAllSmsDeliveriesError, ThrowOnError>({
      ...options,
      url: '/smses'
  });

/**
 * Sends an SMS message for delivery
 * (request type: SendSmsRequest)
 */
export const sendSms = <ThrowOnError extends boolean = false>(options?: Options<SendSmsData, ThrowOnError>) =>
  (options?.client ?? client).post<SendSmsResponse, SendSmsError, ThrowOnError>({
      ...options,
      url: '/smses/send'
  });

/**
 * Cancels the billing subscription for the organization
 * (request type: CancelSubscriptionRequest)
 */
export const cancelSubscription = <ThrowOnError extends boolean = false>(options: Options<CancelSubscriptionData, ThrowOnError>) =>
  (options?.client ?? client).delete<CancelSubscriptionResponse, CancelSubscriptionError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}'
  });

/**
 * Fetches the billing subscription for the organization
 * (request type: GetSubscriptionRequest)
 */
export const getSubscription = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionData, ThrowOnError>) =>
  (options?.client ?? client).get<GetSubscriptionResponse2, GetSubscriptionError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}'
  });

/**
 * Changes the billing subscription plan for the organization
 * (request type: ChangeSubscriptionPlanRequest)
 */
export const changeSubscriptionPlanPut = <ThrowOnError extends boolean = false>(options: Options<ChangeSubscriptionPlanPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeSubscriptionPlanPutResponse, ChangeSubscriptionPlanPutError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/plan'
  });

/**
 * Changes the billing subscription plan for the organization
 * (request type: ChangeSubscriptionPlanRequest)
 */
export const changeSubscriptionPlanPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeSubscriptionPlanPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeSubscriptionPlanPatchResponse, ChangeSubscriptionPlanPatchError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/plan'
  });

/**
 * Forces the billing subscription to be canceled for the organization.
 * (request type: ForceCancelSubscriptionRequest)
 */
export const forceCancelSubscription = <ThrowOnError extends boolean = false>(options: Options<ForceCancelSubscriptionData, ThrowOnError>) =>
  (options?.client ?? client).delete<ForceCancelSubscriptionResponse, ForceCancelSubscriptionError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/force'
  });

/**
 * Fetches a history of invoices for the subscription
 * (request type: SearchSubscriptionHistoryRequest)
 */
export const searchSubscriptionHistory = <ThrowOnError extends boolean = false>(options: Options<SearchSubscriptionHistoryData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchSubscriptionHistoryResponse2, SearchSubscriptionHistoryError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/invoices'
  });

/**
 * Transfers the subscription to another Billing Admin, who will become the subscription buyer
 * (request type: TransferSubscriptionRequest)
 */
export const transferSubscriptionPut = <ThrowOnError extends boolean = false>(options: Options<TransferSubscriptionPutData, ThrowOnError>) =>
  (options?.client ?? client).put<TransferSubscriptionPutResponse, TransferSubscriptionPutError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/transfer'
  });

/**
 * Transfers the subscription to another Billing Admin, who will become the subscription buyer
 * (request type: TransferSubscriptionRequest)
 */
export const transferSubscriptionPatch = <ThrowOnError extends boolean = false>(options: Options<TransferSubscriptionPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<TransferSubscriptionPatchResponse, TransferSubscriptionPatchError, ThrowOnError>({
      ...options,
      url: '/subscriptions/{Id}/transfer'
  });

/**
 * Tests access with HMAC signature authentication
 * (request type: GetCallerWithHMACTestingOnlyRequest)
 */
export const getCallerWithHmacTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetCallerWithHmacTestingOnlyResponse, GetCallerWithHmacTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/authn/hmac/get'
  });

/**
 * Tests access with token authentication
 * (request type: GetCallerWithTokenOrAPIKeyTestingOnlyRequest)
 */
export const getCallerWithTokenOrApiKeyTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetCallerWithTokenOrApiKeyTestingOnlyResponse, GetCallerWithTokenOrApiKeyTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/authn/token/get'
  });

/**
 * Tests access with no authorization
 * (request type: AuthorizeByNothingTestingOnlyRequest)
 */
export const authorizeByNothingTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<AuthorizeByNothingTestingOnlyResponse, AuthorizeByNothingTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/authz/none/get'
  });

/**
 * Tests access with feature authorization
 * (request type: AuthorizeByFeatureTestingOnlyRequest)
 */
export const authorizeByFeatureTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<AuthorizeByFeatureTestingOnlyResponse, AuthorizeByFeatureTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/authz/feature/get'
  });

/**
 * Tests access with role authorization
 * (request type: AuthorizeByRoleTestingOnlyRequest)
 */
export const authorizeByRoleTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<AuthorizeByRoleTestingOnlyResponse, AuthorizeByRoleTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/authz/role/get'
  });

/**
 * Tests content negotiation with a specified format
 * (request type: ContentNegotiationsTestingOnlyRequest)
 */
export const contentNegotiationsTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<ContentNegotiationsTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<ContentNegotiationsTestingOnlyResponse, ContentNegotiationsTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/negotiations/get'
  });

/**
 * Destroys all repositories
 * (request type: DestroyAllRepositoriesRequest)
 */
export const destroyAllRepositories = <ThrowOnError extends boolean = false>(options?: Options<DestroyAllRepositoriesData, ThrowOnError>) =>
  (options?.client ?? client).post<DestroyAllRepositoriesResponse, DestroyAllRepositoriesError, ThrowOnError>({
      ...options,
      url: '/testingonly/repositories/destroy'
  });

/**
 * Tests download of streams
 * (request type: DownloadStreamTestingOnlyRequest)
 */
export const downloadStreamTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<DownloadStreamTestingOnlyResponse, DownloadStreamTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/download'
  });

/**
 * Tests errors, by returning an error result
 * (request type: ErrorsErrorTestingOnlyRequest)
 */
export const errorsErrorTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<ErrorsErrorTestingOnlyResponse, ErrorsErrorTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/errors/error'
  });

/**
 * Tests errors, by throwing an exception
 * (request type: ErrorsThrowTestingOnlyRequest)
 */
export const errorsThrowTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<ErrorsThrowTestingOnlyResponse, ErrorsThrowTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/errors/throws'
  });

/**
 * Tests response formats
 * (request type: FormatsTestingOnlyRequest)
 */
export const formatsTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<FormatsTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<FormatsTestingOnlyResponse2, FormatsTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/formats/roundtrip'
  });

/**
 * Tests the use of an array in a GET request
 * (request type: GetWithSimpleArrayTestingOnlyRequest)
 */
export const getWithSimpleArrayTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<GetWithSimpleArrayTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<GetWithSimpleArrayTestingOnlyResponse, GetWithSimpleArrayTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/get/array'
  });

/**
 * Tests the use of an empty body in a POST request
 * (request type: PostWithEmptyBodyTestingOnlyRequest)
 */
export const postWithEmptyBodyTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<PostWithEmptyBodyTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostWithEmptyBodyTestingOnlyResponse, PostWithEmptyBodyTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/body/empty'
  });

/**
 * Tests the use of an empty body in a POST request that has required properties
 * (request type: PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest)
 */
export const postWithEmptyBodyAndRequiredPropertiesTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<PostWithEmptyBodyAndRequiredPropertiesTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostWithEmptyBodyAndRequiredPropertiesTestingOnlyResponse, PostWithEmptyBodyAndRequiredPropertiesTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/body/empty/required'
  });

/**
 * Tests the use of an empty post body with route parameters Notice the use of Infrastructure.Web.Api.Interfaces.WebRequest`2 instead of Infrastructure.Web.Api.Interfaces.IWebRequest`1
 * (request type: PostWithRouteParamsAndEmptyBodyTestingOnlyRequest)
 */
export const postWithRouteParamsAndEmptyBodyTestingOnly = <ThrowOnError extends boolean = false>(options: Options<PostWithRouteParamsAndEmptyBodyTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostWithRouteParamsAndEmptyBodyTestingOnlyResponse, PostWithRouteParamsAndEmptyBodyTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/body/{astringproperty}/{anumberproperty}/route'
  });

/**
 * Tests the use of reference types, values types, and enums anywhere in a GET request
 * (request type: GetTestingOnlyRequest)
 */
export const getTestingOnly = <ThrowOnError extends boolean = false>(options: Options<GetTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<GetTestingOnlyResponse, GetTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/get/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}'
  });

/**
 * Tests the use of reference types, values types, and enums anywhere in a POST request
 * (request type: PostTestingOnlyRequest)
 */
export const postTestingOnly = <ThrowOnError extends boolean = false>(options: Options<PostTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostTestingOnlyResponse, PostTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/post/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}'
  });

/**
 * Tests the use of reference types, values types, and enums anywhere in a SEARCH request
 * (request type: SearchTestingOnlyRequest)
 */
export const searchTestingOnly = <ThrowOnError extends boolean = false>(options: Options<SearchTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<SearchTestingOnlyResponse2, SearchTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/general/search/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}'
  });

/**
 * Tests access with anonymous access
 * (request type: GetInsecureTestingOnlyRequest)
 */
export const getInsecureTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetInsecureTestingOnlyResponse, GetInsecureTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/security/none'
  });

/**
 * Tests access with anonymous access
 * (request type: PostInsecureTestingOnlyRequest)
 */
export const postInsecureTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<PostInsecureTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostInsecureTestingOnlyResponse, PostInsecureTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/security/none'
  });

/**
 * Tests OpenAPI swagger for application/x-www-form-urlencoded POST requests
 * (request type: OpenApiPostFormUrlEncodedTestingOnlyRequest)
 */
export const openApiPostFormUrlEncodedTestingOnly = <ThrowOnError extends boolean = false>(options: Options<OpenApiPostFormUrlEncodedTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<OpenApiPostFormUrlEncodedTestingOnlyResponse, OpenApiPostFormUrlEncodedTestingOnlyError, ThrowOnError>({
      ...options,
      ...urlSearchParamsBodySerializer,
      headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          ...options?.headers
      },
      url: '/testingonly/openapi/{Id}/urlencoded'
  });

/**
 * Tests OpenAPI swagger for GET requests This includes multiple lines explaining things
 * (request type: OpenApiGetTestingOnlyRequest)
 */
export const openApiGetTestingOnly = <ThrowOnError extends boolean = false>(options: Options<OpenApiGetTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<OpenApiGetTestingOnlyResponse, OpenApiGetTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/openapi/{Id}'
  });

/**
 * Tests OpenAPI swagger for POST requests
 * (request type: OpenApiPostTestingOnlyRequest)
 */
export const openApiPostTestingOnly = <ThrowOnError extends boolean = false>(options: Options<OpenApiPostTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<OpenApiPostTestingOnlyResponse, OpenApiPostTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/openapi/{Id}'
  });

/**
 * Tests OpenAPI swagger for POST requests
 * (request type: OpenApiPutTestingOnlyRequest)
 */
export const openApiPutTestingOnlyPut = <ThrowOnError extends boolean = false>(options: Options<OpenApiPutTestingOnlyPutData, ThrowOnError>) =>
  (options?.client ?? client).put<OpenApiPutTestingOnlyPutResponse, OpenApiPutTestingOnlyPutError, ThrowOnError>({
      ...options,
      url: '/testingonly/openapi/{Id}'
  });

/**
 * Tests OpenAPI swagger for POST requests
 * (request type: OpenApiPutTestingOnlyRequest)
 */
export const openApiPutTestingOnlyPatch = <ThrowOnError extends boolean = false>(options: Options<OpenApiPutTestingOnlyPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<OpenApiPutTestingOnlyPatchResponse, OpenApiPutTestingOnlyPatchError, ThrowOnError>({
      ...options,
      url: '/testingonly/openapi/{Id}'
  });

/**
 * Tests OpenAPI swagger for multipart/form-data POST requests
 * (request type: OpenApiPostMultiPartFormDataTestingOnlyRequest)
 */
export const openApiPostMultiPartFormDataTestingOnly = <ThrowOnError extends boolean = false>(options: Options<OpenApiPostMultiPartFormDataTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<OpenApiPostMultiPartFormDataTestingOnlyResponse, OpenApiPostMultiPartFormDataTestingOnlyError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/testingonly/openapi/{Id}/form-data'
  });

/**
 * Tests the use of a redirect for a GET method
 * (request type: GetWithRedirectTestingOnlyRequest)
 */
export const getWithRedirectTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<GetWithRedirectTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<GetWithRedirectTestingOnlyResponse, GetWithRedirectTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/redirect/get'
  });

/**
 * Tests the use of a redirect for a POST method
 * (request type: PostWithRedirectTestingOnlyRequest)
 */
export const postWithRedirectTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<PostWithRedirectTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<PostWithRedirectTestingOnlyResponse, PostWithRedirectTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/redirect/post'
  });

/**
 * Tests request correlation
 * (request type: RequestCorrelationsTestingOnlyRequest)
 */
export const requestCorrelationsTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<RequestCorrelationsTestingOnlyResponse, RequestCorrelationsTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/correlations/get'
  });

/**
 * Tests default status code for DELETE requests, with no response
 * (request type: StatusesDeleteTestingOnlyRequest)
 */
export const statusesDeleteTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).delete<StatusesDeleteTestingOnlyResponse, StatusesDeleteTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/delete1'
  });

/**
 * Tests default status code for DELETE requests, with a response
 * (request type: StatusesDeleteWithResponseTestingOnlyRequest)
 */
export const statusesDeleteWithResponseTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).delete<StatusesDeleteWithResponseTestingOnlyResponse, StatusesDeleteWithResponseTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/delete2'
  });

/**
 * Tests default status code for GET requests
 * (request type: StatusesGetTestingOnlyRequest)
 */
export const statusesGetTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<StatusesGetTestingOnlyResponse, StatusesGetTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/get'
  });

/**
 * Tests default status code for POST requests, without a location
 * (request type: StatusesPostTestingOnlyRequest)
 */
export const statusesPostTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<StatusesPostTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<StatusesPostTestingOnlyResponse, StatusesPostTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/post1'
  });

/**
 * Tests default status code for POST requests, with a location
 * (request type: StatusesPostWithLocationTestingOnlyRequest)
 */
export const statusesPostWithLocationTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<StatusesPostWithLocationTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<StatusesPostWithLocationTestingOnlyResponse, StatusesPostWithLocationTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/post2'
  });

/**
 * Tests default status code for PUT/PATCH requests
 * (request type: StatusesPutPatchTestingOnlyRequest)
 */
export const statusesPutPatchTestingOnlyPut = <ThrowOnError extends boolean = false>(options?: Options<StatusesPutPatchTestingOnlyPutData, ThrowOnError>) =>
  (options?.client ?? client).put<StatusesPutPatchTestingOnlyPutResponse, StatusesPutPatchTestingOnlyPutError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/putpatch'
  });

/**
 * Tests default status code for PUT/PATCH requests
 * (request type: StatusesPutPatchTestingOnlyRequest)
 */
export const statusesPutPatchTestingOnlyPatch = <ThrowOnError extends boolean = false>(options?: Options<StatusesPutPatchTestingOnlyPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<StatusesPutPatchTestingOnlyPatchResponse, StatusesPutPatchTestingOnlyPatchError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/putpatch'
  });

/**
 * Tests default status code for SEARCH requests
 * (request type: StatusesSearchTestingOnlyRequest)
 */
export const statusesSearchTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<StatusesSearchTestingOnlyResponse, StatusesSearchTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/statuses/search'
  });

/**
 * Tests response for non-validated requests
 * (request type: ValidationsUnvalidatedTestingOnlyRequest)
 */
export const validationsUnvalidatedTestingOnly = <ThrowOnError extends boolean = false>(options?: Options<ValidationsUnvalidatedTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<ValidationsUnvalidatedTestingOnlyResponse, ValidationsUnvalidatedTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/validations/unvalidated'
  });

/**
 * Tests response for validated GET requests
 * (request type: ValidationsValidatedGetTestingOnlyRequest)
 */
export const validationsValidatedGetTestingOnly = <ThrowOnError extends boolean = false>(options: Options<ValidationsValidatedGetTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).get<ValidationsValidatedGetTestingOnlyResponse, ValidationsValidatedGetTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/validations/validated/{Id}'
  });

/**
 * Tests response for validated POST requests
 * (request type: ValidationsValidatedPostTestingOnlyRequest)
 */
export const validationsValidatedPostTestingOnly = <ThrowOnError extends boolean = false>(options: Options<ValidationsValidatedPostTestingOnlyData, ThrowOnError>) =>
  (options?.client ?? client).post<ValidationsValidatedPostTestingOnlyResponse, ValidationsValidatedPostTestingOnlyError, ThrowOnError>({
      ...options,
      url: '/testingonly/validations/validated/{Id}'
  });

/**
 * Notifies a Twilio event, via a webhook
 * (request type: TwilioNotifyWebhookEventRequest)
 */
export const twilioNotifyWebhookEvent = <ThrowOnError extends boolean = false>(options?: Options<TwilioNotifyWebhookEventData, ThrowOnError>) =>
  (options?.client ?? client).post<TwilioNotifyWebhookEventResponse, TwilioNotifyWebhookEventError, ThrowOnError>({
      ...options,
      ...urlSearchParamsBodySerializer,
      headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          ...options?.headers
      },
      url: '/webhooks/twilio'
  });

/**
 * Delivers a usage event
 * (request type: DeliverUsageRequest)
 */
export const deliverUsage = <ThrowOnError extends boolean = false>(options?: Options<DeliverUsageData, ThrowOnError>) =>
  (options?.client ?? client).post<DeliverUsageResponse, DeliverUsageError, ThrowOnError>({
      ...options,
      url: '/usages/deliver'
  });

/**
 * Drains all the pending usage messages
 * (request type: DrainAllUsagesRequest)
 */
export const drainAllUsages = <ThrowOnError extends boolean = false>(options?: Options<DrainAllUsagesData, ThrowOnError>) =>
  (options?.client ?? client).post<DrainAllUsagesResponse, DrainAllUsagesError, ThrowOnError>({
      ...options,
      url: '/usages/drain'
  });

/**
 * Changes the user's contact address
 * (request type: ChangeProfileContactAddressRequest)
 */
export const changeProfileContactAddressPut = <ThrowOnError extends boolean = false>(options: Options<ChangeProfileContactAddressPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeProfileContactAddressPutResponse, ChangeProfileContactAddressPutError, ThrowOnError>({
      ...options,
      url: '/profiles/{UserId}/contact'
  });

/**
 * Changes the user's contact address
 * (request type: ChangeProfileContactAddressRequest)
 */
export const changeProfileContactAddressPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeProfileContactAddressPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeProfileContactAddressPatchResponse, ChangeProfileContactAddressPatchError, ThrowOnError>({
      ...options,
      url: '/profiles/{UserId}/contact'
  });

/**
 * Changes the user's profile information
 * (request type: ChangeProfileRequest)
 */
export const changeProfilePut = <ThrowOnError extends boolean = false>(options: Options<ChangeProfilePutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeProfilePutResponse, ChangeProfilePutError, ThrowOnError>({
      ...options,
      url: '/profiles/{UserId}'
  });

/**
 * Changes the user's profile information
 * (request type: ChangeProfileRequest)
 */
export const changeProfilePatch = <ThrowOnError extends boolean = false>(options: Options<ChangeProfilePatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeProfilePatchResponse, ChangeProfilePatchError, ThrowOnError>({
      ...options,
      url: '/profiles/{UserId}'
  });

/**
 * Changes the user's avatar image
 * (request type: ChangeProfileAvatarRequest)
 */
export const changeProfileAvatarPut = <ThrowOnError extends boolean = false>(options: Options<ChangeProfileAvatarPutData, ThrowOnError>) =>
  (options?.client ?? client).put<ChangeProfileAvatarPutResponse, ChangeProfileAvatarPutError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/profiles/{UserId}/avatar'
  });

/**
 * Changes the user's avatar image
 * (request type: ChangeProfileAvatarRequest)
 */
export const changeProfileAvatarPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeProfileAvatarPatchData, ThrowOnError>) =>
  (options?.client ?? client).patch<ChangeProfileAvatarPatchResponse, ChangeProfileAvatarPatchError, ThrowOnError>({
      ...options,
      ...formDataBodySerializer,
      headers: {
          'Content-Type': null,
          ...options?.headers
      },
      url: '/profiles/{UserId}/avatar'
  });

/**
 * Removes the user's avatar image
 * (request type: DeleteProfileAvatarRequest)
 */
export const deleteProfileAvatar = <ThrowOnError extends boolean = false>(options: Options<DeleteProfileAvatarData, ThrowOnError>) =>
  (options?.client ?? client).delete<DeleteProfileAvatarResponse2, DeleteProfileAvatarError, ThrowOnError>({
      ...options,
      url: '/profiles/{UserId}/avatar'
  });

/**
 * Fetches the profile of the authenticated user
 * (request type: GetProfileForCallerRequest)
 */
export const getProfileForCaller = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetProfileForCallerResponse2, GetProfileForCallerError, ThrowOnError>({
      ...options,
      url: '/profiles/me'
  });