// This file is auto-generated by @hey-api/openapi-ts

export type APIKey = {
  description?: string;
  expiresOnUtc?: string;
  key: string;
  userId: string;
  id: string;
};

export type AssignPlatformRolesRequest = {
  roles?: Array<string> | null;
};

export type AssignRolesToOrganizationRequest = {
  roles?: Array<string> | null;
  userId: string;
};

export type AssociateCredentialMfaAuthenticatorForCallerRequest = {
  authenticatorType: CredentialMfaAuthenticatorType;
  mfaToken?: string | null;
  phoneNumber?: string | null;
};

export type AssociateCredentialMfaAuthenticatorForCallerResponse = {
  authenticator: CredentialMfaAuthenticatorAssociation;
};

export type Audit = {
  againstId?: string;
  auditCode: string;
  created: string;
  messageTemplate: string;
  organizationId?: string;
  templateArguments: Array<string>;
  id: string;
};

export type AuthenticateCredentialRequest = {
  password: string;
  username: string;
};

export type AuthenticateResponse = {
  tokens: AuthenticateTokens;
};

export type AuthenticateSingleSignOnRequest = {
  authCode: string;
  code_verifier?: string | null;
  invitationToken?: string | null;
  provider: string;
  termsAndConditionsAccepted?: boolean | null;
  username?: string | null;
};

export type AuthenticateTokens = {
  accessToken: AuthenticationToken;
  idToken?: AuthenticationToken;
  refreshToken: AuthenticationToken;
  userId: string;
};

export type AuthenticationToken = {
  expiresOn?: string;
  type: TokenType;
  value: string;
};

export type Booking = {
  borrowerId: string;
  carId: string;
  endUtc: string;
  startUtc: string;
  id: string;
};

export type Car = {
  managers?: Array<CarManager>;
  manufacturer: CarManufacturer;
  owner: CarOwner;
  plate: CarLicensePlate;
  status?: string;
  id?: string;
};

export type CarLicensePlate = {
  jurisdiction: string;
  number: string;
};

export type CarManager = {
  id: string;
};

export type CarManufacturer = {
  make: string;
  model: string;
  year: number;
};

export type CarOwner = {
  id: string;
};

export type ChallengeCredentialMfaAuthenticatorForCallerRequest = {
  mfaToken: string;
};

export type ChallengeCredentialMfaAuthenticatorForCallerResponse = {
  challenge: CredentialMfaAuthenticatorChallenge;
};

export type ChangeCredentialMfaForCallerRequest = {
  isEnabled: boolean;
};

export type ChangeCredentialMfaResponse = {
  credential: PersonCredential;
};

export type ChangeDefaultOrganizationRequest = {
  organizationId: string;
};

export type ChangeOrganizationRequest = {
  name?: string | null;
};

export type ChangeProfileAvatarResponse = {
  profile: UserProfile;
};

export type ChangeProfileContactAddressRequest = {
  city?: string | null;
  countryCode?: string | null;
  line1?: string | null;
  line2?: string | null;
  line3?: string | null;
  state?: string | null;
  zip?: string | null;
};

export type ChangeProfileRequest = {
  displayName?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  locale?: string | null;
  phoneNumber?: string | null;
  timezone?: string | null;
};

export type ChangeSubscriptionPlanRequest = {
  planId?: string | null;
};

export type ChargebeeEventContent = {
  customer: ChargebeeEventCustomer;
  subscription: ChargebeeEventSubscription;
};

export type ChargebeeEventCustomer = {
  id: string;
  payment_method?: ChargebeePaymentMethod;
};

export type ChargebeeEventSubscription = {
  billing_period?: number;
  billing_period_unit?: string;
  cancelled_at?: number;
  currency_code?: string;
  customer_id?: string;
  deleted?: boolean;
  id: string;
  next_billing_at?: number;
  status: string;
  subscription_items?: Array<ChargebeeEventSubscriptionItem>;
  trial_end?: number;
  trial_start?: number;
};

export type ChargebeeEventSubscriptionItem = {
  amount?: number;
  item_price_id?: string;
  item_type?: string;
  quantity?: number;
  unit_price?: number;
};

export type ChargebeeNotifyWebhookEventRequest = {
  content?: ChargebeeEventContent;
  event_type?: string | null;
  id?: string | null;
};

export type ChargebeePaymentMethod = {
  id: string;
  status: string;
  type: string;
};

export type CompleteCredentialResetRequest = {
  password: string;
};

export type ConfirmCredentialMfaAuthenticatorForCallerRequest = {
  confirmationCode: string;
  mfaToken?: string | null;
  oobCode?: string | null;
};

export type ConfirmCredentialMfaAuthenticatorForCallerResponse = {
  authenticators?: Array<CredentialMfaAuthenticator>;
  tokens: AuthenticateTokens;
};

export type ConfirmEmailDeliveredRequest = {
  deliveredAtUtc?: string | null;
  receiptId: string;
};

export type ConfirmEmailDeliveryFailedRequest = {
  failedAtUtc?: string | null;
  reason?: string | null;
  receiptId: string;
};

export type ConfirmRegistrationPersonCredentialRequest = {
  token: string;
};

export type ConfirmRegistrationPersonCredentialResponse = {
  [key: string]: unknown;
};

export type ConfirmSmsDeliveredRequest = {
  deliveredAtUtc?: string | null;
  receiptId: string;
};

export type ConfirmSmsDeliveryFailedRequest = {
  failedAtUtc?: string | null;
  reason?: string | null;
  receiptId: string;
};

export type ConsentOAuth2ClientForCallerRequest = {
  consented: boolean;
  redirectUri?: string | null;
  scope: string;
  state?: string | null;
};

export type CreateAPIKeyRequest = {
  expiresOnUtc?: string | null;
};

export type CreateAPIKeyResponse = {
  apiKey: string;
};

export type CreateOAuth2ClientRequest = {
  name: string;
  redirectUri?: string | null;
};

export type CreateOrganizationRequest = {
  name: string;
};

export type CredentialMfaAuthenticator = {
  isActive: boolean;
  type: CredentialMfaAuthenticatorType;
  id: string;
};

export type CredentialMfaAuthenticatorAssociation = {
  barCodeUri: string;
  oobCode: string;
  recoveryCodes?: Array<string>;
  secret: string;
  type: CredentialMfaAuthenticatorType;
};

export type CredentialMfaAuthenticatorChallenge = {
  oobCode: string;
  type: CredentialMfaAuthenticatorType;
};

export type CredentialMfaAuthenticatorType = 'None' | 'RecoveryCodes' | 'OobSms' | 'OobEmail' | 'TotpAuthenticator';

export type CustomDto = {
  double?: number;
  enum?: CustomEnum;
  integer?: number;
  string: string;
  time?: string;
};

export type CustomEnum = 'None' | 'One' | 'TwentyOne' | 'OneHundredAndOne';

export type DeleteProfileAvatarResponse = {
  profile: UserProfile;
};

export type DeliverAuditRequest = {
  message: string;
};

export type DeliverMessageResponse = {
  isSent: boolean;
};

export type DeliverUsageRequest = {
  message: string;
};

export type DeliveredEmail = {
  attempts: Array<string>;
  body: string;
  created: string;
  deliveredAt?: string;
  failedDeliveryAt?: string;
  failedDeliveryReason?: string;
  isDelivered: boolean;
  isDeliveryFailed: boolean;
  isSent: boolean;
  organizationId?: string;
  sentAt?: string;
  subject: string;
  tags: Array<string>;
  toDisplayName: string;
  toEmailAddress: string;
  id: string;
};

export type DeliveredSms = {
  attempts: Array<string>;
  body: string;
  created: string;
  deliveredAt?: string;
  failedDeliveryAt?: string;
  failedDeliveryReason?: string;
  isDelivered: boolean;
  isDeliveryFailed: boolean;
  isSent: boolean;
  organizationId?: string;
  sentAt?: string;
  tags: Array<string>;
  toPhoneNumber: string;
  id: string;
};

export type DestroyAllRepositoriesRequest = {
  [key: string]: unknown;
};

export type DrainAllAuditsRequest = {
  [key: string]: unknown;
};

export type DrainAllEmailsRequest = {
  [key: string]: unknown;
};

export type DrainAllEventNotificationsRequest = {
  [key: string]: unknown;
};

export type DrainAllProvisioningsRequest = {
  [key: string]: unknown;
};

export type DrainAllSmsesRequest = {
  [key: string]: unknown;
};

export type DrainAllUsagesRequest = {
  [key: string]: unknown;
};

export type EmptyResponse = {
  [key: string]: unknown;
};

export type EndUser = {
  access: EndUserAccess;
  classification: EndUserClassification;
  features: Array<string>;
  roles: Array<string>;
  status: EndUserStatus;
  id: string;
};

export type EndUserAccess = 'Enabled' | 'Suspended';

export type EndUserClassification = 'Person' | 'Machine';

export type EndUserStatus = 'Unregistered' | 'Registered';

export type EventNotification = {
  data: string;
  eventType: string;
  metadataFullyQualifiedName: string;
  rootAggregateType: string;
  streamName: string;
  subscriberRef: string;
  version: number;
  id: string;
};

export type ExchangeOAuth2ForTokensResponse = {
  access_token: string;
  expires_in: number;
  id_token?: string;
  refresh_token?: string;
  token_type: OAuth2TokenType;
};

export type ExportSubscriptionsToMigrateResponse = {
  metadata: SearchResultMetadata;
  subscriptions: Array<SubscriptionToMigrate>;
};

export type FeatureFlag = {
  isEnabled: boolean;
  name: string;
};

export type Filtering = {
  fields: Array<string>;
};

export type FormatsTestingOnlyRequest = {
  custom?: CustomDto;
  double?: number | null;
  enum?: CustomEnum;
  integer?: number | null;
  string?: string | null;
  time?: string | null;
};

export type FormatsTestingOnlyResponse = {
  custom: CustomDto;
  double?: number;
  enum?: CustomEnum;
  integer?: number;
  string: string;
  time?: string;
};

export type GeneralTestingOnlyResponse = {
  a_camel_enum?: TestingOnlyEnum;
  a_camel_int?: number;
  a_camel_string?: string;
  anEnumProperty?: TestingOnlyEnum;
  anEnumQueryProperty?: TestingOnlyEnum;
  anEnumRouteProperty?: TestingOnlyEnum;
  anIntProperty?: number;
  anIntQueryProperty?: number;
  anIntRouteProperty?: number;
  aStringProperty: string;
  aStringQueryProperty: string;
  aStringRouteProperty: string;
};

export type GetAllFeatureFlagsResponse = {
  flags: Array<FeatureFlag>;
};

export type GetCallerTestingOnlyResponse = {
  callerId: string;
};

export type GetCarResponse = {
  car: Car;
};

export type GetDiscoveryDocumentResponse = {
  document: OpenIdConnectDiscoveryDocument;
};

export type GetFeatureFlagResponse = {
  flag: FeatureFlag;
};

export type GetIdentityResponse = {
  identity: Identity;
};

export type GetImageResponse = {
  image: Image;
};

export type GetJsonWebKeySetResponse = {
  keys: JsonWebKeySet;
};

export type GetOAuth2ClientConsentResponse = {
  consent: OAuth2ClientConsent;
};

export type GetOAuth2ClientResponse = {
  client: OAuth2Client;
};

export type GetOAuth2ClientWithSecretsResponse = {
  client: OAuth2ClientWithSecrets;
};

export type GetOrganizationResponse = {
  organization: Organization;
};

export type GetOrganizationSettingsResponse = {
  organization: Organization;
  settings: {
    [key: string]: string;
  };
};

export type GetProfileForCallerResponse = {
  profile: UserProfileForCaller;
};

export type GetProfileResponse = {
  profile: UserProfile;
};

export type GetRegistrationPersonConfirmationResponse = {
  token: string;
};

export type GetSubscriptionResponse = {
  subscription: SubscriptionWithPlan;
};

export type GetUserInfoForCallerResponse = {
  user: OpenIdConnectUserInfo;
};

export type HealthCheckResponse = {
  name: string;
  status: string;
};

export type Identity = {
  hasCredentials: boolean;
  isMfaEnabled: boolean;
  id: string;
};

export type Image = {
  contentType: string;
  description?: string;
  filename?: string;
  url: string;
  id: string;
};

export type InitiatePasswordResetRequest = {
  emailAddress: string;
};

export type Invitation = {
  emailAddress: string;
  firstName: string;
  lastName?: string;
};

export type InviteGuestRequest = {
  email: string;
};

export type InviteGuestResponse = {
  invitation: Invitation;
};

export type InviteMemberToOrganizationRequest = {
  email?: string | null;
  userId?: string | null;
};

export type InviteMemberToOrganizationResponse = {
  organization: Organization;
};

export type Invoice = {
  amount?: number;
  currency: string;
  includesTax: boolean;
  invoicedOnUtc?: string;
  lineItems: Array<InvoiceLineItem>;
  notes: Array<InvoiceNote>;
  payment?: InvoiceItemPayment;
  periodEndUtc?: string;
  periodStartUtc?: string;
  status: InvoiceStatus;
  taxAmount?: number;
  id: string;
};

export type InvoiceItemPayment = {
  amount?: number;
  currency: string;
  paidOnUtc?: string;
  reference: string;
};

export type InvoiceLineItem = {
  amount?: number;
  currency: string;
  description: string;
  isTaxed: boolean;
  reference: string;
  taxAmount?: number;
};

export type InvoiceNote = {
  description: string;
};

export type InvoiceStatus = 'Unpaid' | 'Paid';

export type InvoiceSummary = {
  amount: number;
  currency: string;
  nextUtc?: string;
};

export type JsonWebKey = {
  alg: string;
  e?: string;
  k?: string;
  kid: string;
  kty: string;
  n?: string;
  use: string;
};

export type JsonWebKeySet = {
  keys: Array<JsonWebKey>;
};

export type ListCredentialMfaAuthenticatorsForCallerResponse = {
  authenticators: Array<CredentialMfaAuthenticator>;
};

export type ListMembersForOrganizationResponse = {
  metadata: SearchResultMetadata;
  members: Array<OrganizationMember>;
};

export type ListMembershipsForCallerResponse = {
  metadata: SearchResultMetadata;
  memberships: Array<Membership>;
};

export type ListPricingPlansResponse = {
  plans: PricingPlans;
};

export type MachineCredential = {
  apiKey: string;
  createdById: string;
  description?: string;
  expiresOnUtc?: string;
  id: string;
};

export type MailgunDeliveryStatus = {
  description: string;
};

export type MailgunEventData = {
  'delivery-status'?: MailgunDeliveryStatus;
  event: string;
  id: string;
  message: MailgunMessage;
  reason: string;
  severity: string;
  timestamp?: number;
};

export type MailgunMessage = {
  headers: MailgunMessageHeaders;
};

export type MailgunMessageHeaders = {
  from: string;
  'message-id'?: string;
  subject: string;
  to: string;
};

export type MailgunNotifyWebhookEventRequest = {
  'event-data'?: MailgunEventData;
  signature?: MailgunSignature;
};

export type MailgunSignature = {
  signature: string;
  timestamp: string;
  token: string;
};

export type MakeBookingRequest = {
  /**
   * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
   */
  organizationId?: string | null;
  carId: string;
  endUtc?: string | null;
  startUtc: string;
};

export type MakeBookingResponse = {
  booking: Booking;
};

export type Membership = {
  features: Array<string>;
  isDefault: boolean;
  organizationId: string;
  ownership: OrganizationOwnership;
  roles: Array<string>;
  userId: string;
  id: string;
};

export type MigrateSubscriptionRequest = {
  providerName?: string | null;
  providerState?: {
    [key: string]: string;
  } | null;
};

export type MigrateSubscriptionResponse = {
  subscription: Subscription;
};

export type NotifyDomainEventRequest = {
  message: string;
  subscriptionName: string;
};

export type NotifyProvisioningRequest = {
  message: string;
};

export type OAuth2Client = {
  name: string;
  redirectUri?: string;
  id: string;
};

export type OAuth2ClientConsent = {
  clientId: string;
  isConsented: boolean;
  scopes: Array<string>;
  userId: string;
  id: string;
};

export type OAuth2ClientWithSecret = {
  name: string;
  redirectUri?: string;
  id: string;
  expiresOnUtc?: string;
  secret: string;
};

export type OAuth2ClientWithSecrets = {
  name: string;
  redirectUri?: string;
  id: string;
  secrets: Array<OAuthClientSecret>;
};

export type OAuth2GrantType = 'Authorization_Code' | 'Refresh_Token' | 'Client_Credentials' | 'Password' | 'Implicit';

export type OAuth2ResponseType = 'Code' | 'Id_Token' | 'Token';

export type OAuth2TokenType = 'Bearer';

export type OAuthClientSecret = {
  expiresOnUtc?: string;
  reference: string;
};

export type OpenApiPostTestingOnlyRequest = {
  /**
   * anoptionalfield
   */
  optionalField?: string | null;
  /**
   * arequiredfield
   */
  requiredField: string;
};

export type OpenApiPutTestingOnlyRequest = {
  /**
   * anoptionalfield
   */
  optionalField?: string | null;
  /**
   * arequiredfield
   */
  requiredField: string;
};

export type OpenApiResponseObject = {
  anAnnotatedRequiredField: string;
  anInitializedField: string;
  aNullableField?: string;
  aNullableValueTypeField?: boolean;
  aRequiredField: string;
  aValueTypeField: boolean;
};

export type OpenApiTestingOnlyResponse = {
  anAnnotatedRequiredField: string;
  anInitializedField: string;
  anNullableObject?: OpenApiResponseObject;
  aNullableField?: string;
  aNullableValueTypeField?: boolean;
  aRequiredField: string;
  aValueTypeField: boolean;
  message: string;
};

export type OpenIdConnectCodeChallengeMethod = 'Plain' | 'S256';

export type OpenIdConnectDiscoveryDocument = {
  authorizationEndpoint: string;
  claimsSupported: Array<string>;
  codeChallengeMethodsSupported: Array<string>;
  idTokenEncryptionAlgValuesSupported: Array<string>;
  idTokenSigningAlgValuesSupported: Array<string>;
  issuer: string;
  jwksUri: string;
  registrationEndPoint: string;
  responseTypesSupported: Array<string>;
  scopesSupported: Array<string>;
  subjectTypesSupported: Array<string>;
  tokenEndpoint: string;
  tokenEndpointAuthMethodsSupported: Array<string>;
  tokenEndpointAuthSigningAlgValuesSupported: Array<string>;
  userInfoEncryptionAlgValuesSupported: Array<string>;
  userInfoEndpoint: string;
  userInfoSigningAlgValuesSupported: Array<string>;
};

export type OpenIdConnectUserInfo = {
  address: ProfileAddress;
  email: string;
  email_verified?: boolean;
  family_name?: string;
  given_name?: string;
  locale: string;
  name: string;
  phone_number?: string;
  phone_number_verified?: boolean;
  picture: string;
  sub?: string;
  zoneinfo?: string;
};

export type Organization = {
  avatarUrl?: string;
  createdById: string;
  name: string;
  ownership: OrganizationOwnership;
  id: string;
};

export type OrganizationMember = {
  classification: UserProfileClassification;
  emailAddress?: string;
  features: Array<string>;
  isDefault: boolean;
  isOwner: boolean;
  isRegistered: boolean;
  name: PersonName;
  roles: Array<string>;
  userId: string;
  id: string;
};

export type OrganizationOwnership = 'Shared' | 'Personal';

export type PaymentMethodStatus = 'Invalid' | 'Valid';

export type PaymentMethodType = 'None' | 'Card' | 'Other';

export type PeriodFrequencyUnit = 'Eternity' | 'Day' | 'Week' | 'Month' | 'Year';

export type PersonCredential = {
  isMfaEnabled: boolean;
  user: EndUser;
  id: string;
};

export type PersonName = {
  firstName: string;
  lastName?: string;
};

export type PlanPeriod = {
  frequency: number;
  unit: PeriodFrequencyUnit;
};

export type PostInsecureTestingOnlyRequest = {
  [key: string]: unknown;
};

export type PostTestingOnlyRequest = {
  a_camel_enum?: TestingOnlyEnum;
  a_camel_int?: number | null;
  a_camel_string?: string | null;
  anEnumProperty?: TestingOnlyEnum;
  anEnumQueryProperty?: TestingOnlyEnum;
  anIntProperty?: number | null;
  anIntQueryProperty?: number | null;
  aStringProperty?: string | null;
  aStringQueryProperty?: string | null;
};

export type PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest = {
  requiredField?: string | null;
};

export type PostWithEmptyBodyTestingOnlyRequest = {
  [key: string]: unknown;
};

export type PostWithRedirectTestingOnlyRequest = {
  result?: string | null;
};

export type PostWithRouteParamsAndEmptyBodyTestingOnlyRequest = {
  [key: string]: unknown;
};

export type PricingFeatureItem = {
  description: string;
  isIncluded: boolean;
};

export type PricingFeatureSection = {
  description?: string;
  features: Array<PricingFeatureItem>;
};

export type PricingPlan = {
  cost: number;
  currency: string;
  description?: string;
  displayName?: string;
  featureSection: Array<PricingFeatureSection>;
  isRecommended: boolean;
  notes?: string;
  period: PlanPeriod;
  setupCost: number;
  trial?: SubscriptionTrialPeriod;
  id: string;
};

export type PricingPlans = {
  annually: Array<PricingPlan>;
  daily: Array<PricingPlan>;
  eternally: Array<PricingPlan>;
  monthly: Array<PricingPlan>;
  weekly: Array<PricingPlan>;
};

export type ProblemDetails = {
  type: string;
  title: string;
  status?: number;
  detail: string;
  instance: string;
  [key: string]: (unknown | string | number) | undefined;
};

export type ProfileAddress = {
  city: string;
  countryCode?: string;
  line1: string;
  line2: string;
  line3: string;
  state: string;
  zip: string;
};

export type RecordMeasureRequest = {
  additional?: {
    [key: string]: unknown;
  } | null;
  eventName: string;
};

export type RecordUseRequest = {
  additional?: {
    [key: string]: unknown;
  } | null;
  eventName: string;
};

export type RefreshTokenRequest = {
  refreshToken: string;
};

export type RefreshTokenResponse = {
  tokens: AuthenticateTokens;
};

export type RegenerateOAuth2ClientSecretRequest = {
  [key: string]: unknown;
};

export type RegenerateOAuth2ClientSecretResponse = {
  client: OAuth2ClientWithSecret;
};

export type RegisterCarRequest = {
  /**
   * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
   */
  organizationId?: string | null;
  jurisdiction: string;
  make: string;
  model: string;
  numberPlate: string;
  year: number;
};

export type RegisterMachineRequest = {
  apiKeyExpiresOnUtc?: string | null;
  countryCode?: string | null;
  name: string;
  timezone?: string | null;
};

export type RegisterMachineResponse = {
  machine: MachineCredential;
};

export type RegisterPersonCredentialRequest = {
  countryCode?: string | null;
  emailAddress: string;
  firstName: string;
  invitationToken?: string | null;
  lastName: string;
  locale?: string | null;
  password: string;
  termsAndConditionsAccepted?: boolean;
  timezone?: string | null;
};

export type RegisterPersonCredentialResponse = {
  person: PersonCredential;
};

export type ResendGuestInvitationRequest = {
  [key: string]: unknown;
};

export type ResendPasswordResetRequest = {
  [key: string]: unknown;
};

export type ResetCredentialMfaRequest = {
  userId?: string | null;
};

export type ScheduleMaintenanceCarRequest = {
  /**
   * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
   */
  organizationId?: string | null;
  fromUtc?: string;
  toUtc?: string;
};

export type SearchAllAPIKeysResponse = {
  metadata: SearchResultMetadata;
  keys: Array<APIKey>;
};

export type SearchAllAuditsResponse = {
  metadata: SearchResultMetadata;
  audits: Array<Audit>;
};

export type SearchAllBookingsResponse = {
  metadata: SearchResultMetadata;
  bookings: Array<Booking>;
};

export type SearchAllCarUnavailabilitiesResponse = {
  metadata: SearchResultMetadata;
  unavailabilities: Array<Unavailability>;
};

export type SearchAllCarsResponse = {
  metadata: SearchResultMetadata;
  cars: Array<Car>;
};

export type SearchAllEmailDeliveriesResponse = {
  metadata: SearchResultMetadata;
  emails: Array<DeliveredEmail>;
};

export type SearchAllEventNotificationsResponse = {
  metadata: SearchResultMetadata;
  notifications: Array<EventNotification>;
};

export type SearchAllOAuth2ClientsResponse = {
  metadata: SearchResultMetadata;
  clients: Array<OAuth2Client>;
};

export type SearchAllSmsDeliveriesResponse = {
  metadata: SearchResultMetadata;
  smses: Array<DeliveredSms>;
};

export type SearchResultMetadata = {
  filter: Filtering;
  limit: number;
  offset: number;
  sort: Sorting;
  total: number;
};

export type SearchSubscriptionHistoryResponse = {
  metadata: SearchResultMetadata;
  invoices: Array<Invoice>;
};

export type SearchTestingOnlyResponse = {
  metadata: SearchResultMetadata;
  a_camel_enum?: TestingOnlyEnum;
  a_camel_int?: number;
  a_camel_string?: string;
  anEnumProperty?: TestingOnlyEnum;
  anEnumQueryProperty?: TestingOnlyEnum;
  anEnumRouteProperty?: TestingOnlyEnum;
  anIntProperty?: number;
  anIntQueryProperty?: number;
  anIntRouteProperty?: number;
  aStringProperty: string;
  aStringQueryProperty: string;
  aStringRouteProperty: string;
  items?: Array<TestResource>;
};

export type SendEmailRequest = {
  message: string;
};

export type SendSmsRequest = {
  message: string;
};

export type SortDirection = 'Ascending' | 'Descending';

export type Sorting = {
  by: string;
  direction: SortDirection;
};

export type StatusesPostTestingOnlyRequest = {
  [key: string]: unknown;
};

export type StatusesPostWithLocationTestingOnlyRequest = {
  [key: string]: unknown;
};

export type StatusesPutPatchTestingOnlyRequest = {
  [key: string]: unknown;
};

export type StatusesTestingOnlyResponse = {
  message: string;
};

export type StatusesTestingOnlySearchResponse = {
  messages: Array<string>;
  metadata: SearchResultMetadata;
};

export type StringMessageTestingOnlyResponse = {
  message: string;
};

export type Subscription = {
  buyerId: string;
  owningEntityId: string;
  providerName?: string;
  providerState: {
    [key: string]: string;
  };
  id: string;
};

export type SubscriptionPaymentMethod = {
  expiresOn?: string;
  status: PaymentMethodStatus;
  type: PaymentMethodType;
};

export type SubscriptionPlan = {
  id: string;
  isTrial: boolean;
  tier: SubscriptionTier;
  trialEndDateUtc?: string;
};

export type SubscriptionStatus = 'Unsubscribed' | 'Activated' | 'Canceled' | 'Canceling';

export type SubscriptionTier = 'Unsubscribed' | 'Standard' | 'Professional' | 'Enterprise';

export type SubscriptionToMigrate = {
  buyerId: string;
  owningEntityId: string;
  providerName?: string;
  providerState: {
    [key: string]: string;
  };
  id: string;
  buyer: {
    [key: string]: string;
  };
};

export type SubscriptionTrialPeriod = {
  frequency: number;
  hasTrial: boolean;
  unit: PeriodFrequencyUnit;
};

export type SubscriptionWithPlan = {
  buyerId: string;
  owningEntityId: string;
  providerName?: string;
  providerState: {
    [key: string]: string;
  };
  id: string;
  buyerReference: string;
  canBeCanceled: boolean;
  canBeUnsubscribed: boolean;
  canceledDateUtc?: string;
  invoice: InvoiceSummary;
  paymentMethod: SubscriptionPaymentMethod;
  period: PlanPeriod;
  plan: SubscriptionPlan;
  status: SubscriptionStatus;
  subscriptionReference?: string;
};

export type TakeOfflineCarRequest = {
  /**
   * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
   */
  organizationId?: string | null;
  fromUtc?: string | null;
  toUtc?: string | null;
};

export type TestResource = {
  aProperty?: string;
  id: string;
};

export type TestingOnlyEnum = 'Value1' | 'Value2' | 'Value3' | 'Value4';

export type TokenType = 'OtherToken' | 'AccessToken' | 'RefreshToken';

export type TransferSubscriptionRequest = {
  userId?: string | null;
};

export type TwilioMessageStatus =
  | 'Unknown'
  | 'queued'
  | 'sending'
  | 'sent'
  | 'failed'
  | 'delivered'
  | 'undelivered'
  | 'receiving'
  | 'received'
  | 'accepted'
  | 'scheduled'
  | 'read'
  | 'canceled';

export type UnInviteMemberFromOrganizationResponse = {
  organization: Organization;
};

export type UnassignPlatformRolesRequest = {
  roles?: Array<string> | null;
};

export type UnassignRolesFromOrganizationRequest = {
  roles?: Array<string> | null;
  userId: string;
};

export type Unavailability = {
  carId: string;
  causedByReason: string;
  causedByReference?: string;
  id: string;
};

export type UpdateImageRequest = {
  description?: string | null;
};

export type UpdateImageResponse = {
  image: Image;
};

export type UpdateOAuth2ClientRequest = {
  name?: string | null;
  redirectUri?: string | null;
};

export type UpdateUserResponse = {
  user: EndUser;
};

export type UploadImageResponse = {
  image: Image;
};

export type UserProfile = {
  address: ProfileAddress;
  avatarUrl?: string;
  classification: UserProfileClassification;
  displayName: string;
  emailAddress?: string;
  locale?: string;
  name: PersonName;
  phoneNumber?: string;
  timezone?: string;
  userId: string;
  id: string;
};

export type UserProfileClassification = 'Person' | 'Machine';

export type UserProfileForCaller = {
  address: ProfileAddress;
  avatarUrl?: string;
  classification: UserProfileClassification;
  displayName: string;
  emailAddress?: string;
  locale?: string;
  name: PersonName;
  phoneNumber?: string;
  timezone?: string;
  userId: string;
  id: string;
  defaultOrganizationId: string;
  features: Array<string>;
  isAuthenticated: boolean;
  roles: Array<string>;
};

export type ValidationsValidatedPostTestingOnlyRequest = {
  optionalField?: string | null;
  requiredField: string;
};

export type VerifyCredentialMfaAuthenticatorForCallerRequest = {
  confirmationCode: string;
  mfaToken: string;
  oobCode?: string | null;
};

export type VerifyGuestInvitationResponse = {
  invitation: Invitation;
};

export type CreateApiKeyData = {
  body?: CreateAPIKeyRequest;
};

export type CreateApiKeyResponse = CreateAPIKeyResponse;

export type CreateApiKeyError = ProblemDetails | unknown;

export type SearchAllApiKeysForCallerData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllApiKeysForCallerResponse = SearchAllAPIKeysResponse;

export type SearchAllApiKeysForCallerError = ProblemDetails | unknown;

export type DeleteApiKeyData = {
  path: {
    Id: string;
  };
};

export type DeleteApiKeyResponse = void;

export type DeleteApiKeyError = ProblemDetails | unknown;

export type RevokeApiKeyData = {
  path: {
    Id: string;
  };
};

export type RevokeApiKeyResponse = void;

export type RevokeApiKeyError = ProblemDetails | unknown;

export type DeliverAuditData = {
  body?: DeliverAuditRequest;
};

export type DeliverAuditResponse = DeliverMessageResponse;

export type DeliverAuditError = ProblemDetails | unknown;

export type DrainAllAuditsData = {
  body?: DrainAllAuditsRequest;
};

export type DrainAllAuditsResponse = EmptyResponse;

export type DrainAllAuditsError = ProblemDetails | unknown;

export type SearchAllAuditsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    OrganizationId?: string;
    SinceUtc?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllAuditsResponse2 = SearchAllAuditsResponse;

export type SearchAllAuditsError = ProblemDetails | unknown;

export type RefreshTokenData = {
  body?: RefreshTokenRequest;
};

export type RefreshTokenResponse2 = RefreshTokenResponse;

export type RefreshTokenError = ProblemDetails | unknown;

export type RevokeRefreshTokenData = {
  path: {
    RefreshToken: string;
  };
};

export type RevokeRefreshTokenResponse = void;

export type RevokeRefreshTokenError = ProblemDetails | unknown;

export type ExportSubscriptionsToMigrateData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type ExportSubscriptionsToMigrateResponse2 = ExportSubscriptionsToMigrateResponse;

export type ExportSubscriptionsToMigrateError = ProblemDetails | unknown;

export type MigrateSubscriptionPutData = {
  body?: MigrateSubscriptionRequest;
  path: {
    Id: string;
  };
};

export type MigrateSubscriptionPutResponse = MigrateSubscriptionResponse;

export type MigrateSubscriptionPutError = ProblemDetails | unknown;

export type MigrateSubscriptionPatchData = {
  body?: MigrateSubscriptionRequest;
  path: {
    Id: string;
  };
};

export type MigrateSubscriptionPatchResponse = MigrateSubscriptionResponse;

export type MigrateSubscriptionPatchError = ProblemDetails | unknown;

export type CancelBookingData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
  };
};

export type CancelBookingResponse = void;

export type CancelBookingError = ProblemDetails | unknown;

export type MakeBookingData = {
  body?: MakeBookingRequest;
};

export type MakeBookingResponse2 = MakeBookingResponse;

export type MakeBookingError = ProblemDetails | unknown;

export type SearchAllBookingsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    FromUtc?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
    ToUtc?: string;
  };
};

export type SearchAllBookingsResponse2 = SearchAllBookingsResponse;

export type SearchAllBookingsError = ProblemDetails | unknown;

export type DeleteCarData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
  };
};

export type DeleteCarResponse = void;

export type DeleteCarError = ProblemDetails | unknown;

export type GetCarData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
  };
};

export type GetCarResponse2 = GetCarResponse;

export type GetCarError = ProblemDetails | unknown;

export type RegisterCarData = {
  body?: RegisterCarRequest;
};

export type RegisterCarResponse = GetCarResponse;

export type RegisterCarError = ProblemDetails | unknown;

export type SearchAllCarsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllCarsResponse2 = SearchAllCarsResponse;

export type SearchAllCarsError = ProblemDetails | unknown;

export type ScheduleMaintenanceCarPutData = {
  body?: ScheduleMaintenanceCarRequest;
  path: {
    Id: string;
  };
};

export type ScheduleMaintenanceCarPutResponse = GetCarResponse;

export type ScheduleMaintenanceCarPutError = ProblemDetails | unknown;

export type ScheduleMaintenanceCarPatchData = {
  body?: ScheduleMaintenanceCarRequest;
  path: {
    Id: string;
  };
};

export type ScheduleMaintenanceCarPatchResponse = GetCarResponse;

export type ScheduleMaintenanceCarPatchError = ProblemDetails | unknown;

export type SearchAllAvailableCarsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    FromUtc?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
    ToUtc?: string;
  };
};

export type SearchAllAvailableCarsResponse = SearchAllCarsResponse;

export type SearchAllAvailableCarsError = ProblemDetails | unknown;

export type SearchAllCarUnavailabilitiesData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used
     */
    OrganizationId?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllCarUnavailabilitiesResponse2 = SearchAllCarUnavailabilitiesResponse;

export type SearchAllCarUnavailabilitiesError = ProblemDetails | unknown;

export type TakeOfflineCarPutData = {
  body?: TakeOfflineCarRequest;
  path: {
    Id: string;
  };
};

export type TakeOfflineCarPutResponse = GetCarResponse;

export type TakeOfflineCarPutError = ProblemDetails | unknown;

export type TakeOfflineCarPatchData = {
  body?: TakeOfflineCarRequest;
  path: {
    Id: string;
  };
};

export type TakeOfflineCarPatchResponse = GetCarResponse;

export type TakeOfflineCarPatchError = ProblemDetails | unknown;

export type ChargebeeNotifyWebhookEventData = {
  body?: ChargebeeNotifyWebhookEventRequest;
};

export type ChargebeeNotifyWebhookEventResponse = EmptyResponse;

export type ChargebeeNotifyWebhookEventError = ProblemDetails | unknown;

export type ConsentOauth2ClientForCallerData = {
  body?: ConsentOAuth2ClientForCallerRequest;
  path: {
    Id: string;
  };
};

export type ConsentOauth2ClientForCallerResponse = GetOAuth2ClientConsentResponse;

export type ConsentOauth2ClientForCallerError = ProblemDetails | unknown;

export type GetOauth2ClientConsentForCallerData = {
  path: {
    Id: string;
  };
};

export type GetOauth2ClientConsentForCallerResponse = GetOAuth2ClientConsentResponse;

export type GetOauth2ClientConsentForCallerError = ProblemDetails | unknown;

export type CreateOauth2ClientData = {
  body?: CreateOAuth2ClientRequest;
};

export type CreateOauth2ClientResponse = GetOAuth2ClientResponse;

export type CreateOauth2ClientError = ProblemDetails | unknown;

export type SearchAllOauth2ClientsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllOauth2ClientsResponse = SearchAllOAuth2ClientsResponse;

export type SearchAllOauth2ClientsError = ProblemDetails | unknown;

export type DeleteOauth2ClientData = {
  path: {
    Id: string;
  };
};

export type DeleteOauth2ClientResponse = void;

export type DeleteOauth2ClientError = ProblemDetails | unknown;

export type GetOauth2ClientData = {
  path: {
    Id: string;
  };
};

export type GetOauth2ClientResponse = GetOAuth2ClientWithSecretsResponse;

export type GetOauth2ClientError = ProblemDetails | unknown;

export type UpdateOauth2ClientPutData = {
  body?: UpdateOAuth2ClientRequest;
  path: {
    Id: string;
  };
};

export type UpdateOauth2ClientPutResponse = GetOAuth2ClientResponse;

export type UpdateOauth2ClientPutError = ProblemDetails | unknown;

export type UpdateOauth2ClientPatchData = {
  body?: UpdateOAuth2ClientRequest;
  path: {
    Id: string;
  };
};

export type UpdateOauth2ClientPatchResponse = GetOAuth2ClientResponse;

export type UpdateOauth2ClientPatchError = ProblemDetails | unknown;

export type RegenerateOauth2ClientSecretData = {
  body?: RegenerateOAuth2ClientSecretRequest;
  path: {
    Id: string;
  };
};

export type RegenerateOauth2ClientSecretResponse = RegenerateOAuth2ClientSecretResponse;

export type RegenerateOauth2ClientSecretError = ProblemDetails | unknown;

export type RevokeOauth2ClientConsentForCallerData = {
  path: {
    Id: string;
  };
};

export type RevokeOauth2ClientConsentForCallerResponse = GetOAuth2ClientConsentResponse;

export type RevokeOauth2ClientConsentForCallerError = ProblemDetails | unknown;

export type AuthenticateCredentialData = {
  body?: AuthenticateCredentialRequest;
};

export type AuthenticateCredentialResponse = AuthenticateResponse;

export type AuthenticateCredentialError = ProblemDetails | unknown;

export type CompleteCredentialResetData = {
  body?: CompleteCredentialResetRequest;
  path: {
    Token: string;
  };
};

export type CompleteCredentialResetResponse = EmptyResponse;

export type CompleteCredentialResetError = ProblemDetails | unknown;

export type ConfirmRegistrationPersonCredentialData = {
  body?: ConfirmRegistrationPersonCredentialRequest;
};

export type ConfirmRegistrationPersonCredentialResponse2 = ConfirmRegistrationPersonCredentialResponse;

export type ConfirmRegistrationPersonCredentialError = ProblemDetails | unknown;

export type GetRegistrationPersonConfirmationData = {
  query: {
    UserId: string;
  };
};

export type GetRegistrationPersonConfirmationResponse2 = GetRegistrationPersonConfirmationResponse;

export type GetRegistrationPersonConfirmationError = ProblemDetails | unknown;

export type RegisterPersonCredentialData = {
  body?: RegisterPersonCredentialRequest;
};

export type RegisterPersonCredentialResponse2 = RegisterPersonCredentialResponse;

export type RegisterPersonCredentialError = ProblemDetails | unknown;

export type InitiatePasswordResetData = {
  body?: InitiatePasswordResetRequest;
};

export type InitiatePasswordResetResponse = EmptyResponse;

export type InitiatePasswordResetError = ProblemDetails | unknown;

export type ResendPasswordResetData = {
  body?: ResendPasswordResetRequest;
  path: {
    Token: string;
  };
};

export type ResendPasswordResetResponse = EmptyResponse;

export type ResendPasswordResetError = ProblemDetails | unknown;

export type VerifyPasswordResetData = {
  path: {
    Token: string;
  };
};

export type VerifyPasswordResetResponse = EmptyResponse;

export type VerifyPasswordResetError = ProblemDetails | unknown;

export type DrainAllEventNotificationsData = {
  body?: DrainAllEventNotificationsRequest;
};

export type DrainAllEventNotificationsResponse = EmptyResponse;

export type DrainAllEventNotificationsError = ProblemDetails | unknown;

export type NotifyDomainEventData = {
  body?: NotifyDomainEventRequest;
};

export type NotifyDomainEventResponse = DeliverMessageResponse;

export type NotifyDomainEventError = ProblemDetails | unknown;

export type SearchAllEventNotificationsData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchAllEventNotificationsResponse2 = SearchAllEventNotificationsResponse;

export type SearchAllEventNotificationsError = ProblemDetails | unknown;

export type ConfirmEmailDeliveredData = {
  body?: ConfirmEmailDeliveredRequest;
};

export type ConfirmEmailDeliveredResponse = EmptyResponse;

export type ConfirmEmailDeliveredError = ProblemDetails | unknown;

export type ConfirmEmailDeliveryFailedData = {
  body?: ConfirmEmailDeliveryFailedRequest;
};

export type ConfirmEmailDeliveryFailedResponse = EmptyResponse;

export type ConfirmEmailDeliveryFailedError = ProblemDetails | unknown;

export type DrainAllEmailsData = {
  body?: DrainAllEmailsRequest;
};

export type DrainAllEmailsResponse = EmptyResponse;

export type DrainAllEmailsError = ProblemDetails | unknown;

export type SearchAllEmailDeliveriesData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    OrganizationId?: string;
    SinceUtc?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
    Tags?: string;
  };
};

export type SearchAllEmailDeliveriesResponse2 = SearchAllEmailDeliveriesResponse;

export type SearchAllEmailDeliveriesError = ProblemDetails | unknown;

export type SendEmailData = {
  body?: SendEmailRequest;
};

export type SendEmailResponse = DeliverMessageResponse;

export type SendEmailError = ProblemDetails | unknown;

export type AssignPlatformRolesData = {
  body?: AssignPlatformRolesRequest;
  path: {
    Id: string;
  };
};

export type AssignPlatformRolesResponse = UpdateUserResponse;

export type AssignPlatformRolesError = ProblemDetails | unknown;

export type UnassignPlatformRolesPutData = {
  body?: UnassignPlatformRolesRequest;
  path: {
    Id: string;
  };
};

export type UnassignPlatformRolesPutResponse = UpdateUserResponse;

export type UnassignPlatformRolesPutError = ProblemDetails | unknown;

export type UnassignPlatformRolesPatchData = {
  body?: UnassignPlatformRolesRequest;
  path: {
    Id: string;
  };
};

export type UnassignPlatformRolesPatchResponse = UpdateUserResponse;

export type UnassignPlatformRolesPatchError = ProblemDetails | unknown;

export type GetFeatureFlagData = {
  path: {
    Name: string;
    UserId: string;
  };
  query?: {
    TenantId?: string;
  };
};

export type GetFeatureFlagResponse2 = GetFeatureFlagResponse;

export type GetFeatureFlagError = ProblemDetails | unknown;

export type GetAllFeatureFlagsResponse2 = GetAllFeatureFlagsResponse;

export type GetAllFeatureFlagsError = ProblemDetails | unknown;

export type GetFeatureFlagForCallerData = {
  path: {
    Name: string;
  };
};

export type GetFeatureFlagForCallerResponse = GetFeatureFlagResponse;

export type GetFeatureFlagForCallerError = ProblemDetails | unknown;

export type HealthCheckResponse2 = HealthCheckResponse;

export type HealthCheckError = ProblemDetails | unknown;

export type GetIdentityForCallerResponse = GetIdentityResponse;

export type GetIdentityForCallerError = ProblemDetails | unknown;

export type DeleteImageData = {
  path: {
    Id: string;
  };
};

export type DeleteImageResponse = void;

export type DeleteImageError = ProblemDetails | unknown;

export type GetImageData = {
  path: {
    Id: string;
  };
};

export type GetImageResponse2 = GetImageResponse;

export type GetImageError = ProblemDetails | unknown;

export type UpdateImagePutData = {
  body?: UpdateImageRequest;
  path: {
    Id: string;
  };
};

export type UpdateImagePutResponse = UpdateImageResponse;

export type UpdateImagePutError = ProblemDetails | unknown;

export type UpdateImagePatchData = {
  body?: UpdateImageRequest;
  path: {
    Id: string;
  };
};

export type UpdateImagePatchResponse = UpdateImageResponse;

export type UpdateImagePatchError = ProblemDetails | unknown;

export type DownloadImageData = {
  path: {
    Id: string;
  };
};

export type DownloadImageResponse = Blob | File;

export type DownloadImageError = ProblemDetails | unknown;

export type UploadImageData = {
  body?: {
    files: Array<Blob | File>;
    description?: string;
  };
};

export type UploadImageResponse2 = UploadImageResponse;

export type UploadImageError = ProblemDetails | unknown;

export type InviteGuestData = {
  body?: InviteGuestRequest;
};

export type InviteGuestResponse2 = InviteGuestResponse;

export type InviteGuestError = ProblemDetails | unknown;

export type ResendGuestInvitationData = {
  body?: ResendGuestInvitationRequest;
  path: {
    Token: string;
  };
};

export type ResendGuestInvitationResponse = EmptyResponse;

export type ResendGuestInvitationError = ProblemDetails | unknown;

export type VerifyGuestInvitationData = {
  path: {
    Token: string;
  };
};

export type VerifyGuestInvitationResponse2 = VerifyGuestInvitationResponse;

export type VerifyGuestInvitationError = ProblemDetails | unknown;

export type RegisterMachineData = {
  body?: RegisterMachineRequest;
};

export type RegisterMachineResponse2 = RegisterMachineResponse;

export type RegisterMachineError = ProblemDetails | unknown;

export type MailgunNotifyWebhookEventData = {
  body?: MailgunNotifyWebhookEventRequest;
};

export type MailgunNotifyWebhookEventResponse = EmptyResponse;

export type MailgunNotifyWebhookEventError = ProblemDetails | unknown;

export type ChangeDefaultOrganizationPutData = {
  body?: ChangeDefaultOrganizationRequest;
};

export type ChangeDefaultOrganizationPutResponse = UpdateUserResponse;

export type ChangeDefaultOrganizationPutError = ProblemDetails | unknown;

export type ChangeDefaultOrganizationPatchData = {
  body?: ChangeDefaultOrganizationRequest;
};

export type ChangeDefaultOrganizationPatchResponse = UpdateUserResponse;

export type ChangeDefaultOrganizationPatchError = ProblemDetails | unknown;

export type ListMembershipsForCallerData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type ListMembershipsForCallerResponse2 = ListMembershipsForCallerResponse;

export type ListMembershipsForCallerError = ProblemDetails | unknown;

export type AssociateCredentialMfaAuthenticatorForCallerData = {
  body?: AssociateCredentialMfaAuthenticatorForCallerRequest;
};

export type AssociateCredentialMfaAuthenticatorForCallerResponse2 =
  AssociateCredentialMfaAuthenticatorForCallerResponse;

export type AssociateCredentialMfaAuthenticatorForCallerError = ProblemDetails | unknown;

export type ListCredentialMfaAuthenticatorsForCallerData = {
  query?: {
    MfaToken?: string;
  };
};

export type ListCredentialMfaAuthenticatorsForCallerResponse2 = ListCredentialMfaAuthenticatorsForCallerResponse;

export type ListCredentialMfaAuthenticatorsForCallerError = ProblemDetails | unknown;

export type ChallengeCredentialMfaAuthenticatorForCallerPutData = {
  body?: ChallengeCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorId: string;
  };
};

export type ChallengeCredentialMfaAuthenticatorForCallerPutResponse =
  ChallengeCredentialMfaAuthenticatorForCallerResponse;

export type ChallengeCredentialMfaAuthenticatorForCallerPutError = ProblemDetails | unknown;

export type ChallengeCredentialMfaAuthenticatorForCallerPatchData = {
  body?: ChallengeCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorId: string;
  };
};

export type ChallengeCredentialMfaAuthenticatorForCallerPatchResponse =
  ChallengeCredentialMfaAuthenticatorForCallerResponse;

export type ChallengeCredentialMfaAuthenticatorForCallerPatchError = ProblemDetails | unknown;

export type ChangeCredentialMfaForCallerPutData = {
  body?: ChangeCredentialMfaForCallerRequest;
};

export type ChangeCredentialMfaForCallerPutResponse = ChangeCredentialMfaResponse;

export type ChangeCredentialMfaForCallerPutError = ProblemDetails | unknown;

export type ChangeCredentialMfaForCallerPatchData = {
  body?: ChangeCredentialMfaForCallerRequest;
};

export type ChangeCredentialMfaForCallerPatchResponse = ChangeCredentialMfaResponse;

export type ChangeCredentialMfaForCallerPatchError = ProblemDetails | unknown;

export type ConfirmCredentialMfaAuthenticatorForCallerPutData = {
  body?: ConfirmCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorType: string;
  };
};

export type ConfirmCredentialMfaAuthenticatorForCallerPutResponse = ConfirmCredentialMfaAuthenticatorForCallerResponse;

export type ConfirmCredentialMfaAuthenticatorForCallerPutError = ProblemDetails | unknown;

export type ConfirmCredentialMfaAuthenticatorForCallerPatchData = {
  body?: ConfirmCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorType: string;
  };
};

export type ConfirmCredentialMfaAuthenticatorForCallerPatchResponse =
  ConfirmCredentialMfaAuthenticatorForCallerResponse;

export type ConfirmCredentialMfaAuthenticatorForCallerPatchError = ProblemDetails | unknown;

export type DisassociateCredentialMfaAuthenticatorForCallerData = {
  path: {
    Id: string;
  };
};

export type DisassociateCredentialMfaAuthenticatorForCallerResponse = void;

export type DisassociateCredentialMfaAuthenticatorForCallerError = ProblemDetails | unknown;

export type ResetCredentialMfaPutData = {
  body?: ResetCredentialMfaRequest;
};

export type ResetCredentialMfaPutResponse = ChangeCredentialMfaResponse;

export type ResetCredentialMfaPutError = ProblemDetails | unknown;

export type ResetCredentialMfaPatchData = {
  body?: ResetCredentialMfaRequest;
};

export type ResetCredentialMfaPatchResponse = ChangeCredentialMfaResponse;

export type ResetCredentialMfaPatchError = ProblemDetails | unknown;

export type VerifyCredentialMfaAuthenticatorForCallerPutData = {
  body?: VerifyCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorType: string;
  };
};

export type VerifyCredentialMfaAuthenticatorForCallerPutResponse = AuthenticateResponse;

export type VerifyCredentialMfaAuthenticatorForCallerPutError = ProblemDetails | unknown;

export type VerifyCredentialMfaAuthenticatorForCallerPatchData = {
  body?: VerifyCredentialMfaAuthenticatorForCallerRequest;
  path: {
    AuthenticatorType: string;
  };
};

export type VerifyCredentialMfaAuthenticatorForCallerPatchResponse = AuthenticateResponse;

export type VerifyCredentialMfaAuthenticatorForCallerPatchError = ProblemDetails | unknown;

export type AuthorizeOauth2GetData = {
  query: {
    ClientId?: string;
    CodeChallenge?: string;
    CodeChallengeMethod?: string;
    Nonce?: string;
    RedirectUri: string;
    ResponseType: string;
    Scope: string;
    State?: string;
  };
};

export type AuthorizeOauth2GetResponse = EmptyResponse;

export type AuthorizeOauth2GetError = unknown | ProblemDetails;

export type AuthorizeOauth2PostData = {
  body?: {
    clientId: string;
    codeChallenge?: string;
    codeChallengeMethod?: unknown;
    nonce?: string;
    redirectUri: string;
    responseType: unknown;
    scope: string;
    state?: string;
  };
};

export type AuthorizeOauth2PostResponse = EmptyResponse;

export type AuthorizeOauth2PostError = unknown | ProblemDetails;

export type ExchangeOauth2ForTokensData = {
  body?: {
    clientId: string;
    clientSecret: string;
    code?: string;
    codeVerifier?: string;
    grantType: unknown;
    redirectUri?: string;
    refreshToken?: string;
    scope?: string;
  };
};

export type ExchangeOauth2ForTokensResponse = ExchangeOAuth2ForTokensResponse;

export type ExchangeOauth2ForTokensError = ProblemDetails | unknown;

export type GetUserInfoForCallerResponse2 = GetUserInfoForCallerResponse;

export type GetUserInfoForCallerError = ProblemDetails | unknown;

export type GetDiscoveryDocumentResponse2 = GetDiscoveryDocumentResponse;

export type GetDiscoveryDocumentError = ProblemDetails | unknown;

export type GetJsonWebKeySetResponse2 = GetJsonWebKeySetResponse;

export type GetJsonWebKeySetError = ProblemDetails | unknown;

export type AssignRolesToOrganizationPutData = {
  body?: AssignRolesToOrganizationRequest;
  path: {
    Id: string;
  };
};

export type AssignRolesToOrganizationPutResponse = GetOrganizationResponse;

export type AssignRolesToOrganizationPutError = ProblemDetails | unknown;

export type AssignRolesToOrganizationPatchData = {
  body?: AssignRolesToOrganizationRequest;
  path: {
    Id: string;
  };
};

export type AssignRolesToOrganizationPatchResponse = GetOrganizationResponse;

export type AssignRolesToOrganizationPatchError = ProblemDetails | unknown;

export type ChangeOrganizationAvatarPutData = {
  body?: {
    files: Array<Blob | File>;
  };
  path: {
    Id: string;
  };
};

export type ChangeOrganizationAvatarPutResponse = GetOrganizationResponse;

export type ChangeOrganizationAvatarPutError = ProblemDetails | unknown;

export type ChangeOrganizationAvatarPatchData = {
  body?: {
    files: Array<Blob | File>;
  };
  path: {
    Id: string;
  };
};

export type ChangeOrganizationAvatarPatchResponse = GetOrganizationResponse;

export type ChangeOrganizationAvatarPatchError = ProblemDetails | unknown;

export type DeleteOrganizationAvatarData = {
  path: {
    Id: string;
  };
};

export type DeleteOrganizationAvatarResponse = GetOrganizationResponse;

export type DeleteOrganizationAvatarError = ProblemDetails | unknown;

export type ChangeOrganizationPutData = {
  body?: ChangeOrganizationRequest;
  path: {
    Id: string;
  };
};

export type ChangeOrganizationPutResponse = GetOrganizationResponse;

export type ChangeOrganizationPutError = ProblemDetails | unknown;

export type ChangeOrganizationPatchData = {
  body?: ChangeOrganizationRequest;
  path: {
    Id: string;
  };
};

export type ChangeOrganizationPatchResponse = GetOrganizationResponse;

export type ChangeOrganizationPatchError = ProblemDetails | unknown;

export type DeleteOrganizationData = {
  path: {
    Id: string;
  };
};

export type DeleteOrganizationResponse = void;

export type DeleteOrganizationError = ProblemDetails | unknown;

export type GetOrganizationData = {
  path: {
    Id: string;
  };
};

export type GetOrganizationResponse2 = GetOrganizationResponse;

export type GetOrganizationError = ProblemDetails | unknown;

export type CreateOrganizationData = {
  body?: CreateOrganizationRequest;
};

export type CreateOrganizationResponse = GetOrganizationResponse;

export type CreateOrganizationError = ProblemDetails | unknown;

export type GetOrganizationSettingsData = {
  path: {
    Id: string;
  };
};

export type GetOrganizationSettingsResponse2 = GetOrganizationSettingsResponse;

export type GetOrganizationSettingsError = ProblemDetails | unknown;

export type InviteMemberToOrganizationData = {
  body?: InviteMemberToOrganizationRequest;
  path: {
    Id: string;
  };
};

export type InviteMemberToOrganizationResponse2 = InviteMemberToOrganizationResponse;

export type InviteMemberToOrganizationError = ProblemDetails | unknown;

export type ListMembersForOrganizationData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type ListMembersForOrganizationResponse2 = ListMembersForOrganizationResponse;

export type ListMembersForOrganizationError = ProblemDetails | unknown;

export type UnassignRolesFromOrganizationPutData = {
  body?: UnassignRolesFromOrganizationRequest;
  path: {
    Id: string;
  };
};

export type UnassignRolesFromOrganizationPutResponse = GetOrganizationResponse;

export type UnassignRolesFromOrganizationPutError = ProblemDetails | unknown;

export type UnassignRolesFromOrganizationPatchData = {
  body?: UnassignRolesFromOrganizationRequest;
  path: {
    Id: string;
  };
};

export type UnassignRolesFromOrganizationPatchResponse = GetOrganizationResponse;

export type UnassignRolesFromOrganizationPatchError = ProblemDetails | unknown;

export type UnInviteMemberFromOrganizationData = {
  path: {
    Id: string;
    UserId: string;
  };
};

export type UnInviteMemberFromOrganizationResponse2 = UnInviteMemberFromOrganizationResponse;

export type UnInviteMemberFromOrganizationError = ProblemDetails | unknown;

export type ListPricingPlansResponse2 = ListPricingPlansResponse;

export type ListPricingPlansError = ProblemDetails | unknown;

export type DrainAllProvisioningsData = {
  body?: DrainAllProvisioningsRequest;
};

export type DrainAllProvisioningsResponse = EmptyResponse;

export type DrainAllProvisioningsError = ProblemDetails | unknown;

export type NotifyProvisioningData = {
  body?: NotifyProvisioningRequest;
};

export type NotifyProvisioningResponse = DeliverMessageResponse;

export type NotifyProvisioningError = ProblemDetails | unknown;

export type RecordMeasureData = {
  body?: RecordMeasureRequest;
};

export type RecordMeasureResponse = EmptyResponse;

export type RecordMeasureError = ProblemDetails | unknown;

export type RecordUseData = {
  body?: RecordUseRequest;
};

export type RecordUseResponse = EmptyResponse;

export type RecordUseError = ProblemDetails | unknown;

export type AuthenticateSingleSignOnData = {
  body?: AuthenticateSingleSignOnRequest;
};

export type AuthenticateSingleSignOnResponse = AuthenticateResponse;

export type AuthenticateSingleSignOnError = ProblemDetails | unknown;

export type ConfirmSmsDeliveredData = {
  body?: ConfirmSmsDeliveredRequest;
};

export type ConfirmSmsDeliveredResponse = EmptyResponse;

export type ConfirmSmsDeliveredError = ProblemDetails | unknown;

export type ConfirmSmsDeliveryFailedData = {
  body?: ConfirmSmsDeliveryFailedRequest;
};

export type ConfirmSmsDeliveryFailedResponse = EmptyResponse;

export type ConfirmSmsDeliveryFailedError = ProblemDetails | unknown;

export type DrainAllSmsesData = {
  body?: DrainAllSmsesRequest;
};

export type DrainAllSmsesResponse = EmptyResponse;

export type DrainAllSmsesError = ProblemDetails | unknown;

export type SearchAllSmsDeliveriesData = {
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    OrganizationId?: string;
    SinceUtc?: string;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
    Tags?: string;
  };
};

export type SearchAllSmsDeliveriesResponse2 = SearchAllSmsDeliveriesResponse;

export type SearchAllSmsDeliveriesError = ProblemDetails | unknown;

export type SendSmsData = {
  body?: SendSmsRequest;
};

export type SendSmsResponse = DeliverMessageResponse;

export type SendSmsError = ProblemDetails | unknown;

export type CancelSubscriptionData = {
  path: {
    Id: string;
  };
};

export type CancelSubscriptionResponse = GetSubscriptionResponse;

export type CancelSubscriptionError = ProblemDetails | unknown;

export type GetSubscriptionData = {
  path: {
    Id: string;
  };
};

export type GetSubscriptionResponse2 = GetSubscriptionResponse;

export type GetSubscriptionError = ProblemDetails | unknown;

export type ChangeSubscriptionPlanPutData = {
  body?: ChangeSubscriptionPlanRequest;
  path: {
    Id: string;
  };
};

export type ChangeSubscriptionPlanPutResponse = GetSubscriptionResponse;

export type ChangeSubscriptionPlanPutError = ProblemDetails | unknown;

export type ChangeSubscriptionPlanPatchData = {
  body?: ChangeSubscriptionPlanRequest;
  path: {
    Id: string;
  };
};

export type ChangeSubscriptionPlanPatchResponse = GetSubscriptionResponse;

export type ChangeSubscriptionPlanPatchError = ProblemDetails | unknown;

export type ForceCancelSubscriptionData = {
  path: {
    Id: string;
  };
};

export type ForceCancelSubscriptionResponse = GetSubscriptionResponse;

export type ForceCancelSubscriptionError = ProblemDetails | unknown;

export type SearchSubscriptionHistoryData = {
  path: {
    Id: string;
  };
  query?: {
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    FromUtc?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
    ToUtc?: string;
  };
};

export type SearchSubscriptionHistoryResponse2 = SearchSubscriptionHistoryResponse;

export type SearchSubscriptionHistoryError = ProblemDetails | unknown;

export type TransferSubscriptionPutData = {
  body?: TransferSubscriptionRequest;
  path: {
    Id: string;
  };
};

export type TransferSubscriptionPutResponse = GetSubscriptionResponse;

export type TransferSubscriptionPutError = ProblemDetails | unknown;

export type TransferSubscriptionPatchData = {
  body?: TransferSubscriptionRequest;
  path: {
    Id: string;
  };
};

export type TransferSubscriptionPatchResponse = GetSubscriptionResponse;

export type TransferSubscriptionPatchError = ProblemDetails | unknown;

export type GetCallerWithHmacTestingOnlyResponse = GetCallerTestingOnlyResponse;

export type GetCallerWithHmacTestingOnlyError = ProblemDetails | unknown;

export type GetCallerWithTokenOrApiKeyTestingOnlyResponse = GetCallerTestingOnlyResponse;

export type GetCallerWithTokenOrApiKeyTestingOnlyError = ProblemDetails | unknown;

export type AuthorizeByNothingTestingOnlyResponse = GetCallerTestingOnlyResponse;

export type AuthorizeByNothingTestingOnlyError = ProblemDetails | unknown;

export type AuthorizeByFeatureTestingOnlyResponse = GetCallerTestingOnlyResponse;

export type AuthorizeByFeatureTestingOnlyError = ProblemDetails | unknown;

export type AuthorizeByRoleTestingOnlyResponse = GetCallerTestingOnlyResponse;

export type AuthorizeByRoleTestingOnlyError = ProblemDetails | unknown;

export type ContentNegotiationsTestingOnlyData = {
  query?: {
    Format?: string;
  };
};

export type ContentNegotiationsTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ContentNegotiationsTestingOnlyError = ProblemDetails | unknown;

export type DestroyAllRepositoriesData = {
  body?: DestroyAllRepositoriesRequest;
};

export type DestroyAllRepositoriesResponse = EmptyResponse;

export type DestroyAllRepositoriesError = ProblemDetails | unknown;

export type DownloadStreamTestingOnlyResponse = Blob | File;

export type DownloadStreamTestingOnlyError = ProblemDetails | unknown;

export type ErrorsErrorTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ErrorsErrorTestingOnlyError = ProblemDetails | unknown;

export type ErrorsThrowTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ErrorsThrowTestingOnlyError = ProblemDetails | unknown;

export type FormatsTestingOnlyData = {
  body?: FormatsTestingOnlyRequest;
};

export type FormatsTestingOnlyResponse2 = FormatsTestingOnlyResponse;

export type FormatsTestingOnlyError = ProblemDetails | unknown;

export type GetWithSimpleArrayTestingOnlyData = {
  query?: {
    AnArray?: string;
  };
};

export type GetWithSimpleArrayTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type GetWithSimpleArrayTestingOnlyError = ProblemDetails | unknown;

export type PostWithEmptyBodyTestingOnlyData = {
  body?: PostWithEmptyBodyTestingOnlyRequest;
};

export type PostWithEmptyBodyTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type PostWithEmptyBodyTestingOnlyError = ProblemDetails | unknown;

export type PostWithEmptyBodyAndRequiredPropertiesTestingOnlyData = {
  body?: PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest;
};

export type PostWithEmptyBodyAndRequiredPropertiesTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type PostWithEmptyBodyAndRequiredPropertiesTestingOnlyError = ProblemDetails | unknown;

export type PostWithRouteParamsAndEmptyBodyTestingOnlyData = {
  body?: PostWithRouteParamsAndEmptyBodyTestingOnlyRequest;
  path: {
    ANumberProperty: number;
    AStringProperty: string;
  };
};

export type PostWithRouteParamsAndEmptyBodyTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type PostWithRouteParamsAndEmptyBodyTestingOnlyError = ProblemDetails | unknown;

export type GetTestingOnlyData = {
  path: {
    AnEnumRouteProperty: string;
    AnIntRouteProperty: number;
    AStringRouteProperty: string;
  };
  query?: {
    ACamelEnumProperty?: string;
    ACamelIntProperty?: number;
    ACamelStringProperty?: string;
    AnEnumProperty?: string;
    AnEnumQueryProperty?: string;
    AnIntProperty?: number;
    AnIntQueryProperty?: number;
    AStringProperty?: string;
    AStringQueryProperty?: string;
  };
};

export type GetTestingOnlyResponse = GeneralTestingOnlyResponse;

export type GetTestingOnlyError = ProblemDetails | unknown;

export type PostTestingOnlyData = {
  body?: PostTestingOnlyRequest;
  path: {
    AnEnumRouteProperty: string;
    AnIntRouteProperty: number;
    AStringRouteProperty: string;
  };
};

export type PostTestingOnlyResponse = GeneralTestingOnlyResponse;

export type PostTestingOnlyError = ProblemDetails | unknown;

export type SearchTestingOnlyData = {
  path: {
    AnEnumRouteProperty: string;
    AnIntRouteProperty: number;
    AStringRouteProperty: string;
  };
  query?: {
    ACamelEnumProperty?: string;
    ACamelIntProperty?: number;
    ACamelStringProperty?: string;
    AnEnumProperty?: string;
    AnEnumQueryProperty?: string;
    AnIntProperty?: number;
    AnIntQueryProperty?: number;
    AStringProperty?: string;
    AStringQueryProperty?: string;
    /**
     * List of child resources to embed in the resource
     */
    Embed?: string;
    /**
     * List of fields to include and exclude in the search result
     */
    Filter?: string;
    /**
     * The maximum number of search results to return
     */
    Limit?: number;
    /**
     * The zero-based index of the first search result
     */
    Offset?: number;
    /**
     * List of fields to sort the results on
     */
    Sort?: string;
  };
};

export type SearchTestingOnlyResponse2 = SearchTestingOnlyResponse;

export type SearchTestingOnlyError = ProblemDetails | unknown;

export type GetInsecureTestingOnlyResponse = EmptyResponse;

export type GetInsecureTestingOnlyError = ProblemDetails | unknown;

export type PostInsecureTestingOnlyData = {
  body?: PostInsecureTestingOnlyRequest;
};

export type PostInsecureTestingOnlyResponse = EmptyResponse;

export type PostInsecureTestingOnlyError = ProblemDetails | unknown;

export type OpenApiPostFormUrlEncodedTestingOnlyData = {
  body?: {
    optionalField?: string;
    requiredField: string;
  };
  path: {
    Id: string;
  };
};

export type OpenApiPostFormUrlEncodedTestingOnlyResponse = OpenApiTestingOnlyResponse;

export type OpenApiPostFormUrlEncodedTestingOnlyError = ProblemDetails | unknown;

export type OpenApiGetTestingOnlyData = {
  path: {
    /**
     * anid
     */
    Id: string;
  };
  query: {
    /**
     * anoptionalfield
     */
    OptionalField?: string;
    /**
     * arequiredfield
     */
    RequiredField: string;
  };
};

export type OpenApiGetTestingOnlyResponse = OpenApiTestingOnlyResponse;

export type OpenApiGetTestingOnlyError = ProblemDetails | unknown;

export type OpenApiPostTestingOnlyData = {
  body?: OpenApiPostTestingOnlyRequest;
  path: {
    /**
     * anid
     */
    Id: string;
  };
};

export type OpenApiPostTestingOnlyResponse = OpenApiTestingOnlyResponse;

export type OpenApiPostTestingOnlyError = ProblemDetails | unknown;

export type OpenApiPutTestingOnlyPutData = {
  body?: OpenApiPutTestingOnlyRequest;
  path: {
    /**
     * anid
     */
    Id: string;
  };
};

export type OpenApiPutTestingOnlyPutResponse = OpenApiTestingOnlyResponse;

export type OpenApiPutTestingOnlyPutError = ProblemDetails | unknown;

export type OpenApiPutTestingOnlyPatchData = {
  body?: OpenApiPutTestingOnlyRequest;
  path: {
    /**
     * anid
     */
    Id: string;
  };
};

export type OpenApiPutTestingOnlyPatchResponse = OpenApiTestingOnlyResponse;

export type OpenApiPutTestingOnlyPatchError = ProblemDetails | unknown;

export type OpenApiPostMultiPartFormDataTestingOnlyData = {
  body?: {
    files: Array<Blob | File>;
    optionalField?: string;
    requiredField: string;
  };
  path: {
    Id: string;
  };
};

export type OpenApiPostMultiPartFormDataTestingOnlyResponse = OpenApiTestingOnlyResponse;

export type OpenApiPostMultiPartFormDataTestingOnlyError = ProblemDetails | unknown;

export type GetWithRedirectTestingOnlyData = {
  query?: {
    Result?: string;
  };
};

export type GetWithRedirectTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type GetWithRedirectTestingOnlyError = ProblemDetails | unknown;

export type PostWithRedirectTestingOnlyData = {
  body?: PostWithRedirectTestingOnlyRequest;
};

export type PostWithRedirectTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type PostWithRedirectTestingOnlyError = ProblemDetails | unknown;

export type RequestCorrelationsTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type RequestCorrelationsTestingOnlyError = ProblemDetails | unknown;

export type StatusesDeleteTestingOnlyResponse = void;

export type StatusesDeleteTestingOnlyError = ProblemDetails | unknown;

export type StatusesDeleteWithResponseTestingOnlyResponse = StatusesTestingOnlyResponse;

export type StatusesDeleteWithResponseTestingOnlyError = ProblemDetails | unknown;

export type StatusesGetTestingOnlyResponse = StatusesTestingOnlyResponse;

export type StatusesGetTestingOnlyError = ProblemDetails | unknown;

export type StatusesPostTestingOnlyData = {
  body?: StatusesPostTestingOnlyRequest;
};

export type StatusesPostTestingOnlyResponse = StatusesTestingOnlyResponse;

export type StatusesPostTestingOnlyError = ProblemDetails | unknown;

export type StatusesPostWithLocationTestingOnlyData = {
  body?: StatusesPostWithLocationTestingOnlyRequest;
};

export type StatusesPostWithLocationTestingOnlyResponse = StatusesTestingOnlyResponse;

export type StatusesPostWithLocationTestingOnlyError = ProblemDetails | unknown;

export type StatusesPutPatchTestingOnlyPutData = {
  body?: StatusesPutPatchTestingOnlyRequest;
};

export type StatusesPutPatchTestingOnlyPutResponse = StatusesTestingOnlyResponse;

export type StatusesPutPatchTestingOnlyPutError = ProblemDetails | unknown;

export type StatusesPutPatchTestingOnlyPatchData = {
  body?: StatusesPutPatchTestingOnlyRequest;
};

export type StatusesPutPatchTestingOnlyPatchResponse = StatusesTestingOnlyResponse;

export type StatusesPutPatchTestingOnlyPatchError = ProblemDetails | unknown;

export type StatusesSearchTestingOnlyResponse = StatusesTestingOnlySearchResponse;

export type StatusesSearchTestingOnlyError = ProblemDetails | unknown;

export type ValidationsUnvalidatedTestingOnlyData = {
  query?: {
    Id?: string;
  };
};

export type ValidationsUnvalidatedTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ValidationsUnvalidatedTestingOnlyError = ProblemDetails | unknown;

export type ValidationsValidatedGetTestingOnlyData = {
  path: {
    Id: string;
  };
  query: {
    OptionalField?: string;
    RequiredField: string;
  };
};

export type ValidationsValidatedGetTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ValidationsValidatedGetTestingOnlyError = ProblemDetails | unknown;

export type ValidationsValidatedPostTestingOnlyData = {
  body?: ValidationsValidatedPostTestingOnlyRequest;
  path: {
    Id: string;
  };
};

export type ValidationsValidatedPostTestingOnlyResponse = StringMessageTestingOnlyResponse;

export type ValidationsValidatedPostTestingOnlyError = ProblemDetails | unknown;

export type TwilioNotifyWebhookEventData = {
  body?: {
    apiVersion?: string;
    errorCode?: string;
    from?: string;
    messageSid?: string;
    messageStatus?: unknown;
    rawDlrDoneDate?: number;
    smsStatus?: unknown;
    to?: string;
  };
};

export type TwilioNotifyWebhookEventResponse = EmptyResponse;

export type TwilioNotifyWebhookEventError = ProblemDetails | unknown;

export type DeliverUsageData = {
  body?: DeliverUsageRequest;
};

export type DeliverUsageResponse = DeliverMessageResponse;

export type DeliverUsageError = ProblemDetails | unknown;

export type DrainAllUsagesData = {
  body?: DrainAllUsagesRequest;
};

export type DrainAllUsagesResponse = EmptyResponse;

export type DrainAllUsagesError = ProblemDetails | unknown;

export type ChangeProfileContactAddressPutData = {
  body?: ChangeProfileContactAddressRequest;
  path: {
    UserId: string;
  };
};

export type ChangeProfileContactAddressPutResponse = GetProfileResponse;

export type ChangeProfileContactAddressPutError = ProblemDetails | unknown;

export type ChangeProfileContactAddressPatchData = {
  body?: ChangeProfileContactAddressRequest;
  path: {
    UserId: string;
  };
};

export type ChangeProfileContactAddressPatchResponse = GetProfileResponse;

export type ChangeProfileContactAddressPatchError = ProblemDetails | unknown;

export type ChangeProfilePutData = {
  body?: ChangeProfileRequest;
  path: {
    UserId: string;
  };
};

export type ChangeProfilePutResponse = GetProfileResponse;

export type ChangeProfilePutError = ProblemDetails | unknown;

export type ChangeProfilePatchData = {
  body?: ChangeProfileRequest;
  path: {
    UserId: string;
  };
};

export type ChangeProfilePatchResponse = GetProfileResponse;

export type ChangeProfilePatchError = ProblemDetails | unknown;

export type ChangeProfileAvatarPutData = {
  body?: {
    files: Array<Blob | File>;
  };
  path: {
    UserId: string;
  };
};

export type ChangeProfileAvatarPutResponse = ChangeProfileAvatarResponse;

export type ChangeProfileAvatarPutError = ProblemDetails | unknown;

export type ChangeProfileAvatarPatchData = {
  body?: {
    files: Array<Blob | File>;
  };
  path: {
    UserId: string;
  };
};

export type ChangeProfileAvatarPatchResponse = ChangeProfileAvatarResponse;

export type ChangeProfileAvatarPatchError = ProblemDetails | unknown;

export type DeleteProfileAvatarData = {
  path: {
    UserId: string;
  };
};

export type DeleteProfileAvatarResponse2 = DeleteProfileAvatarResponse;

export type DeleteProfileAvatarError = ProblemDetails | unknown;

export type GetProfileForCallerResponse2 = GetProfileForCallerResponse;

export type GetProfileForCallerError = ProblemDetails | unknown;
