using Application.Interfaces.Resources;

namespace Application.Resources.Shared;

public class Identity : IIdentifiableResource
{
    public required bool HasCredentials { get; set; }

    public required bool IsMfaEnabled { get; set; }

    public required string Id { get; set; }
}

public class AuthenticateTokens
{
    public required AuthenticationToken AccessToken { get; set; }

    public required AuthenticationToken RefreshToken { get; set; }

    public required string UserId { get; set; }
}

public class ProviderAuthenticationTokens
{
    public required AuthenticationToken AccessToken { get; set; }

    public required List<AuthenticationToken> OtherTokens { get; set; }

    public required string Provider { get; set; }

    public required AuthenticationToken? RefreshToken { get; set; }
}

public class AuthenticationToken
{
    public required DateTime? ExpiresOn { get; set; }

    public required TokenType Type { get; set; }

    public required string Value { get; set; }
}

public class APIKey : IIdentifiableResource
{
    public string? Description { get; set; }

    public DateTime? ExpiresOnUtc { get; set; }

    public required string Key { get; set; }

    public required string UserId { get; set; }

    public required string Id { get; set; }
}

public class AuthToken
{
    public AuthToken(TokenType type, string value, DateTime? expiresOn)
    {
        Type = type;
        Value = value;
        ExpiresOn = expiresOn;
    }

    public DateTime? ExpiresOn { get; }

    public TokenType Type { get; }

    public string Value { get; }
}

public enum TokenType
{
    OtherToken = 0, // e.g. idToken
    AccessToken = 1, // access_token
    RefreshToken = 2 // refresh_token
}

public class SSOUser : IIdentifiableResource
{
    public required string ProviderUId { get; set; }

    public required string Id { get; set; }
}

public class PersonCredential : IIdentifiableResource
{
    public bool IsMfaEnabled { get; set; }

    public required EndUser User { get; set; }

    public required string Id { get; set; }
}

public class PersonCredentialEmailConfirmation
{
    public required string Token { get; set; }

    public required string Url { get; set; }
}

public enum CredentialMfaAuthenticatorType
{
    None = 0,
    RecoveryCodes = 1, // Recovery codes
    OobSms = 2, // Code is sent "Out of Band" in an SMS message 
    OobEmail = 3, // Code is sent "Out of Band" in an email message
    TotpAuthenticator = 4 // "Time-based One Time Password" is generated by a supported authenticator App
}

public class CredentialMfaAuthenticator : IIdentifiableResource
{
    public bool IsActive { get; set; }

    public required CredentialMfaAuthenticatorType Type { get; set; }

    public required string Id { get; set; }
}

public class CredentialMfaAuthenticatorAssociation
{
    public string? BarCodeUri { get; set; }

    public string? OobCode { get; set; }

    public List<string>? RecoveryCodes { get; set; }

    public string? Secret { get; set; }

    public required CredentialMfaAuthenticatorType Type { get; set; }
}

public class CredentialMfaAuthenticatorChallenge
{
    public string? OobCode { get; set; }

    public CredentialMfaAuthenticatorType Type { get; set; }
}

public class CredentialMfaAuthenticatorConfirmation
{
    public List<CredentialMfaAuthenticator>? Authenticators { get; set; }

    public AuthenticateTokens? Tokens { get; set; }
}

public class MachineCredential : IIdentifiableResource
{
    public required string ApiKey { get; set; }

    public required string CreatedById { get; set; }

    public string? Description { get; set; }

    public DateTime? ExpiresOnUtc { get; set; }

    public required string Id { get; set; }
}

public class OidcDiscoveryDocument
{
    public required string AuthorizationEndpoint { get; set; }

    public required List<string> ClaimsSupported { get; set; }

    public required List<string> CodeChallengeMethodsSupported { get; set; }

    public required List<string> IdTokenSigningAlgValuesSupported { get; set; }

    public required string Issuer { get; set; }

    public required string JwksUri { get; set; }

    public required List<string> ResponseTypesSupported { get; set; }

    public required List<string> ScopesSupported { get; set; }

    public required List<string> SubjectTypesSupported { get; set; }

    public required string TokenEndpoint { get; set; }

    public required List<string> TokenEndpointAuthMethodsSupported { get; set; }

    public required string UserInfoEndpoint { get; set; }
}

public class OidcAuthorizationResponse
{
    public required string Code { get; set; }

    public string? State { get; set; }
}

public class OidcTokenResponse
{
    public required string AccessToken { get; set; }

    public required int ExpiresIn { get; set; }

    public string? IdToken { get; set; }

    public string? RefreshToken { get; set; }

    public string? Scope { get; set; }

    public required string TokenType { get; set; }
}

public class OidcUserInfoResponse
{
    public string? Email { get; set; }

    public bool? EmailVerified { get; set; }

    public string? FamilyName { get; set; }

    public string? GivenName { get; set; }

    public string? Locale { get; set; }

    public string? Name { get; set; }

    public string? Picture { get; set; }

    public required string Sub { get; set; }

    public string? Zoneinfo { get; set; }
}

public class JsonWebKeySet
{
    public required List<JsonWebKey> Keys { get; set; }
}

public class JsonWebKey
{
    public required string Alg { get; set; }

    public string? E { get; set; }

    public string? K { get; set; }

    public required string Kid { get; set; }

    public required string Kty { get; set; }

    public string? N { get; set; }

    public required string Use { get; set; }
}

public class OidcClient : IIdentifiableResource
{
    public required List<string> AllowedGrantTypes { get; set; }

    public required List<string> AllowedScopes { get; set; }

    public required string ClientSecret { get; set; }

    public required string Name { get; set; }

    public required List<string> RedirectUris { get; set; }

    public bool RequireClientSecret { get; set; }

    public bool RequirePkce { get; set; }

    public required string Id { get; set; }
}

public class OAuth2Client : IIdentifiableResource
{
    public required string Name { get; set; }

    public required string Id { get; set; }

    public string? RedirectUri { get; set; }
}

public class OAuth2ClientWithSecret : OAuth2Client
{
    public DateTime? ExpiresOnUtc { get; set; }

    public required string Secret { get; set; }
}