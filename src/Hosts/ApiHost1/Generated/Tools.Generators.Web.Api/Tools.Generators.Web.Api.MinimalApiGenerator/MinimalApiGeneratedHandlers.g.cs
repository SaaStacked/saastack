// <auto-generated/>
using System.Text;
using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Builder;
using Infrastructure.Web.Api.Operations.Shared.TestingOnly;
using Infrastructure.Web.Api.Operations.Shared.Health;
using Infrastructure.Web.Api.Interfaces;
using Infrastructure.Web.Api.Common.Extensions;
using Infrastructure.Interfaces;
using Common.Extensions;
using Common;
using Application.Resources.Shared;
using Application.Persistence.Interfaces;
using Application.Persistence.Common.Extensions;
using Application.Interfaces;

namespace ApiHost1
{
    public static class MinimalApiRegistration
    {
        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
        {
            var healthapiGroup = app.MapGroup(string.Empty)
                .WithTags("HealthApi")
                .RequireCors("__DefaultCorsPolicy")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
            healthapiGroup.MapGet("/health",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.Health.HealthCheckRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.Health.HealthCheckRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var api = new global::ApiHost1.Api.Health.HealthApi();
                        var result = await api.Check(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.Health.HealthCheckRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "HealthCheck";
                        op.Description = "(request type: HealthCheckRequest)";
                        op.Responses.Clear();
                        return op;
                    });
        var testingwebapiGroup = app.MapGroup(string.Empty)
                .WithTags("TestingWebApi")
                .RequireCors("__DefaultCorsPolicy")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.HttpRecordingFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ApiUsageFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.RequestCorrelationFilter>()
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ContentNegotiationFilter>();
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authn/hmac/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithHMACTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithHMACTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthNHMAC(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("HMAC")
                .RequireAuthorization("RolesAndFeatures:{|Features|:{|Platform|:[|platform_basic_features|]},|Roles|:{|Platform|:[|platform_internal_service|]}}")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithHMACTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetCallerWithHMACTestingOnly";
                        op.Description = "(request type: GetCallerWithHMACTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authn/interhost/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithPrivateInterHostTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithPrivateInterHostTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthNPrivateApi(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("PrivateInterHost")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithPrivateInterHostTestingOnlyRequest>>()
                .ExcludeFromDescription();
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authn/token/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithTokenOrAPIKeyTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithTokenOrAPIKeyTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthNToken(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Token")
                .RequireAuthorization("RolesAndFeatures:{|Features|:{|Platform|:[|platform_basic_features|]},|Roles|:{|Platform|:[|platform_standard|]}}")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetCallerWithTokenOrAPIKeyTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetCallerWithTokenOrAPIKeyTestingOnly";
                        op.Description = "(request type: GetCallerWithTokenOrAPIKeyTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authz/anonymous/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByAnonymousTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByAnonymousTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthZAnonymous(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByAnonymousTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "AuthorizeByAnonymousTestingOnly";
                        op.Description = "(request type: AuthorizeByAnonymousTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authz/feature/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByFeatureTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByFeatureTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthZByFeature(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Token")
                .RequireAuthorization("RolesAndFeatures:{|Features|:{|Platform|:[|platform_paidtrial_features|]},|Roles|:{|Platform|:[|platform_standard|]}}")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByFeatureTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "AuthorizeByFeatureTestingOnly";
                        op.Description = "(request type: AuthorizeByFeatureTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/authz/role/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByTokenWithRoleTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByTokenWithRoleTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.AuthZByRole(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Token")
                .RequireAuthorization("RolesAndFeatures:{|Features|:{|Platform|:[|platform_basic_features|]},|Roles|:{|Platform|:[|platform_standard|]}}")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.AuthorizeByTokenWithRoleTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "AuthorizeByTokenWithRoleTestingOnly";
                        op.Description = "(request type: AuthorizeByTokenWithRoleTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/negotiations/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ContentNegotiationsTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ContentNegotiationsTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ContentNegotiationGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ContentNegotiationsTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ContentNegotiationsTestingOnly";
                        op.Description = "(request type: ContentNegotiationsTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/repositories/destroy",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DestroyAllRepositoriesRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DestroyAllRepositoriesRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.DestroyAllRepositories(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DestroyAllRepositoriesRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "DestroyAllRepositories";
                        op.Description = "(request type: DestroyAllRepositoriesRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/download",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DownloadStreamTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DownloadStreamTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.DownloadImage(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.DownloadStreamTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "DownloadStreamTestingOnly";
                        op.Description = "(request type: DownloadStreamTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/errors/error",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsErrorTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsErrorTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ErrorsError(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsErrorTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ErrorsErrorTestingOnly";
                        op.Description = "(request type: ErrorsErrorTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/errors/throws",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsThrowTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsThrowTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ErrorsThrows(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ErrorsThrowTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ErrorsThrowTestingOnly";
                        op.Description = "(request type: ErrorsThrowTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/formats/roundtrip",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.FormatsTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.FormatsTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.FormatsRoundTrip(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.FormatsTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "FormatsTestingOnly";
                        op.Description = "(request type: FormatsTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/general/get/array",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithSimpleArrayTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithSimpleArrayTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralArrayGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithSimpleArrayTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetWithSimpleArrayTestingOnly";
                        op.Description = "(request type: GetWithSimpleArrayTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/general/body/empty",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralEmptyBodyPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostWithEmptyBodyTestingOnly";
                        op.Description = "(request type: PostWithEmptyBodyTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/general/body/empty/required",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralEmptyBodyRequiredPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostWithEmptyBodyAndRequiredPropertiesTestingOnly";
                        op.Description = "(request type: PostWithEmptyBodyAndRequiredPropertiesTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/general/body/{astringproperty}/{anumberproperty}/route",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRouteParamsAndEmptyBodyTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRouteParamsAndEmptyBodyTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralEmptyBodyWithRouteParamsPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRouteParamsAndEmptyBodyTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostWithRouteParamsAndEmptyBodyTestingOnly";
                        op.Description = "(request type: PostWithRouteParamsAndEmptyBodyTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/general/get/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetTestingOnly";
                        op.Description = "(request type: GetTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/general/post/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostTestingOnly";
                        op.Description = "(request type: PostTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/general/search/a/{AnEnumRouteProperty}/b/{AnIntRouteProperty}/c/{AStringRouteProperty}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.SearchTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.SearchTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GeneralSearch(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Search);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.SearchTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "SearchTestingOnly";
                        op.Description = "(request type: SearchTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/security/none",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetInsecureTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetInsecureTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.GetInsecure(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetInsecureTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetInsecureTestingOnly";
                        op.Description = "(request type: GetInsecureTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/openapi/{Id}/urlencoded",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostFormUrlEncodedTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostFormUrlEncodedTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiFormUrlEncoded(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostFormUrlEncodedTestingOnlyRequest>>()
                .DisableAntiforgery()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiPostFormUrlEncodedTestingOnly";
                        op.Description = "(request type: OpenApiPostFormUrlEncodedTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/openapi/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiGetTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiGetTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiGetTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiGetTestingOnly";
                        op.Description = "(request type: OpenApiGetTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/openapi/{Id}/form-data",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostMultiPartFormDataTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostMultiPartFormDataTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiMultiPartForm(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostMultiPartFormDataTestingOnlyRequest>>()
                .DisableAntiforgery()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiPostMultiPartFormDataTestingOnly";
                        op.Description = "(request type: OpenApiPostMultiPartFormDataTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/openapi/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPostTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiPostTestingOnly";
                        op.Description = "(request type: OpenApiPostTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPut("/testingonly/openapi/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiPut(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiPutTestingOnly (Put)";
                        op.Description = "(request type: OpenApiPutTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
            testingwebapiGroup.MapPatch("/testingonly/openapi/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.OpenApiPut(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.OpenApiPutTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "OpenApiPutTestingOnly (Patch)";
                        op.Description = "(request type: OpenApiPutTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/security/none",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostInsecureTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostInsecureTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.PostInsecure(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostInsecureTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostInsecureTestingOnly";
                        op.Description = "(request type: PostInsecureTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/redirect/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithRedirectTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithRedirectTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.RedirectGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.GetWithRedirectTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "GetWithRedirectTestingOnly";
                        op.Description = "(request type: GetWithRedirectTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/redirect/post",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRedirectTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRedirectTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.RedirectPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.PostWithRedirectTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "PostWithRedirectTestingOnly";
                        op.Description = "(request type: PostWithRedirectTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/correlations/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.RequestCorrelationsTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.RequestCorrelationsTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.RequestCorrelationGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.RequestCorrelationsTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "RequestCorrelationsTestingOnly";
                        op.Description = "(request type: RequestCorrelationsTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapDelete("/testingonly/statuses/delete1",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesDelete1(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Delete);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesDeleteTestingOnly";
                        op.Description = "(request type: StatusesDeleteTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapDelete("/testingonly/statuses/delete2",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteWithResponseTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteWithResponseTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesDelete2(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Delete);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesDeleteWithResponseTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesDeleteWithResponseTestingOnly";
                        op.Description = "(request type: StatusesDeleteWithResponseTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/statuses/get",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesGetTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesGetTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesGetTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesGetTestingOnly";
                        op.Description = "(request type: StatusesGetTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/statuses/post1",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesPost1(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesPostTestingOnly";
                        op.Description = "(request type: StatusesPostTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/statuses/post2",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostWithLocationTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostWithLocationTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesPost2(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPostWithLocationTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesPostWithLocationTestingOnly";
                        op.Description = "(request type: StatusesPostWithLocationTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPut("/testingonly/statuses/putpatch",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesPutPatch(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesPutPatchTestingOnly (Put)";
                        op.Description = "(request type: StatusesPutPatchTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
            testingwebapiGroup.MapPatch("/testingonly/statuses/putpatch",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesPutPatch(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.PutPatch);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesPutPatchTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesPutPatchTestingOnly (Patch)";
                        op.Description = "(request type: StatusesPutPatchTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/statuses/search",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesSearchTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesSearchTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.StatusesSearch(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Search);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.StatusesSearchTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "StatusesSearchTestingOnly";
                        op.Description = "(request type: StatusesSearchTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/validations/unvalidated",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsUnvalidatedTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsUnvalidatedTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ValidationsUnvalidated(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsUnvalidatedTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ValidationsUnvalidatedTestingOnly";
                        op.Description = "(request type: ValidationsUnvalidatedTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapGet("/testingonly/validations/validated/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedGetTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedGetTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ValidationsValidatedGet(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Get);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedGetTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ValidationsValidatedGetTestingOnly";
                        op.Description = "(request type: ValidationsValidatedGetTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif
#if TESTINGONLY
            testingwebapiGroup.MapPost("/testingonly/validations/validated/{Id}",
                async (global::System.IServiceProvider serviceProvider, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedPostTestingOnlyRequest request) =>
                {
                    return await Handle(serviceProvider, request, global::System.Threading.CancellationToken.None);

                    static async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::System.IServiceProvider services, global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedPostTestingOnlyRequest request, global::System.Threading.CancellationToken cancellationToken)
                    {
                        var callerFactory = services.GetRequiredService<global::Infrastructure.Interfaces.ICallerContextFactory>();
                        var serviceProvider = services.GetRequiredService<global::System.IServiceProvider>();

                        var api = new global::ApiHost1.Api.TestingOnly.TestingWebApi(callerFactory, serviceProvider);
                        var result = await api.ValidationsValidatedPost(request, cancellationToken);
                        return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.OperationMethod.Post);
                    }
                })
                .RequireAuthorization("Anonymous")
                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.Endpoints.ValidationFilter<global::Infrastructure.Web.Api.Operations.Shared.TestingOnly.ValidationsValidatedPostTestingOnlyRequest>>()
                .WithOpenApi(op =>
                    {
                        op.OperationId = "ValidationsValidatedPostTestingOnly";
                        op.Description = "(request type: ValidationsValidatedPostTestingOnlyRequest)";
                        op.Responses.Clear();
                        return op;
                    });
#endif

        }
    }
}

